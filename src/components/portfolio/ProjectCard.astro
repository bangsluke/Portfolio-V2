---
import {
	processContent,
	processObsidianLink,
} from '../../utils/content-processor';
import SkillPill from '../ui/SkillPill.astro';

const {
	name,
	imageURL,
	technologies,
	shortDescription,
	slug,
	companyLogoURL,
	linkedCompany,
} = Astro.props;

// Process content to handle Obsidian links and markdown
const processedShortDescription = processContent(shortDescription || '');

function getSlug(str: string) {
	return str
		.toLowerCase()
		.replace(/[^a-z0-9]+/g, '-')
		.replace(/(^-|-$)/g, '');
}

// Extract company name from linkedCompany array
let companyName = null;
if (linkedCompany && linkedCompany.length > 0) {
	const linkedCompanyRaw = linkedCompany[0];
	const extractedName = processObsidianLink(linkedCompanyRaw);
	// Only show if it's not "n/a" or blank
	if (
		extractedName &&
		extractedName.toLowerCase() !== 'n/a' &&
		extractedName.trim() !== ''
	) {
		companyName = extractedName;
	}
}

const projectSlug = slug || getSlug(name);

// Use name from frontmatter (generated by sync process)
const displayName = name;

// Process technologies for display
const MAX_VISIBLE_SKILLS = 5;
const visibleTechnologies = technologies
	? technologies.slice(0, MAX_VISIBLE_SKILLS)
	: [];
const hiddenTechnologies = technologies
	? technologies.slice(MAX_VISIBLE_SKILLS)
	: [];
const hasHiddenSkills = hiddenTechnologies.length > 0;
---

<article
	class="project-card group bg-linear-to-br from-light-theme-accent-100 to-white dark:from-theme-950 dark:to-zinc-950 rounded-2xl shadow-lg p-0 flex flex-col overflow-hidden transition-transform hover:scale-105 duration-300 min-h-[420px] cursor-pointer"
	data-slug={projectSlug}>
	<!-- Div holding the image, image filter, and link to project details -->
	<div class="relative w-full h-48 overflow-hidden rounded-t-2xl">
		<img
			src={imageURL || '/images/imagedefault.webp'}
			alt={name}
			class="w-full h-full object-cover object-top"
			loading="lazy"
		/>
		<div
			class="absolute inset-0 bg-black/20 dark:bg-black/50 group-hover:bg-black/5 transition-all duration-300 pointer-events-none">
		</div>
		<a
			href={`/projects/${projectSlug}`}
			class="absolute top-3 right-3 opacity-0 group-hover:opacity-100 md:opacity-0 md:group-hover:opacity-100 transition-all duration-300 bg-theme-400 hover:bg-theme-500 text-black rounded-full p-2 shadow-lg z-10 flex items-center justify-center"
			aria-label={`View details for ${name}`}
			title={`View details for ${name}`}
			onclick="event.stopPropagation();">
			<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"
				><path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
				></path></svg
			>
		</a>
	</div>
	<div class="flex flex-col flex-1 p-6">
		<h2 class="text-2xl font-bold text-theme-400 dark:text-theme-100 mb-3">
			{displayName}
		</h2>
		<div class="flex flex-wrap gap-2 mb-4">
			{
				visibleTechnologies &&
					visibleTechnologies.map((tech: string) => {
						const cleanTech = tech.replace(/\[|\]/g, '');
						return (
							<SkillPill
								skillName={cleanTech}
								variant="theme"
								size="sm"
								className="shadow hover:bg-theme-700/30"
							/>
						);
					})
			}
			{
				hasHiddenSkills && (
					<div class="relative group/tooltip">
						<div class="flex items-center justify-center w-8 h-8 bg-theme-400/20 border border-theme-400/30 rounded-full text-theme-400 hover:bg-theme-400/30 transition-colors duration-200 cursor-help">
							<span class="text-sm font-medium">
								+{hiddenTechnologies.length}
							</span>
						</div>
						<div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover/tooltip:opacity-100 group-active/tooltip:opacity-100 transition-opacity duration-200 pointer-events-none z-50 w-[250px] max-w-[90vw]">
							<div class="global-tooltip w-full">
								<div class="global-tooltip-content">
									<div class="text-xs text-theme-400 font-medium mb-2">
										Additional technologies:
									</div>
									<div class="flex flex-wrap gap-2">
										{hiddenTechnologies.map((tech: string) => {
											const cleanTech = tech.replace(/\[|\]/g, '');
											return (
												<SkillPill
													skillName={cleanTech}
													variant="dark"
													size="sm"
													className="shadow hover:bg-theme-700/30"
												/>
											);
										})}
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		</div>
		<div
			class="text-zinc-00 dark:text-zinc-300 text-base flex-1 mb-4 processed-content"
			set:html={processedShortDescription}
		/>

		{
			companyName && (
				<div class="mt-auto pt-4 border-t border-zinc-700">
					<div class="relative group/tooltip">
						<span class="text-sm text-zinc-00 dark:text-zinc-300">
							Developed for:{' '}
							<span class="text-theme-400 hover:text-theme-300 transition-colors cursor-help">
								{companyName}
							</span>
						</span>
						{companyLogoURL && (
							<div class="absolute bottom-full left-0 mb-2 opacity-0 group-hover/tooltip:opacity-100 group-active/tooltip:opacity-100 transition-opacity duration-200 pointer-events-none z-20">
								<div class="global-tooltip">
									<div class="global-tooltip-content">
										<div class="flex items-center gap-3">
											<img
												src={companyLogoURL}
												alt={`${companyName} logo`}
												class="w-12 h-12 object-contain rounded"
											/>
											<span class="text-white font-medium text-sm whitespace-nowrap">
												{companyName}
											</span>
										</div>
									</div>
								</div>
							</div>
						)}
					</div>
				</div>
			)
		}

		<!-- Mobile "See more detail..." link -->
		<div
			class="mobile-detail-link hidden md:hidden mt-4 pt-4 border-t border-zinc-700">
			<a
				href={`/projects/${projectSlug}`}
				class="flex items-center justify-center gap-2 text-theme-400 hover:text-theme-300 transition-colors text-sm font-medium"
				onclick="event.stopPropagation();">
				<span>See more detail...</span>
				<svg
					class="w-4 h-4"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9 5l7 7-7 7"></path>
				</svg>
			</a>
		</div>

		<!-- Desktop "Show more details" link -->
		<div
			class="desktop-detail-link hidden md:block mt-4 pt-4 border-t border-zinc-700 opacity-0 transition-opacity duration-300">
			<a
				href={`/projects/${projectSlug}`}
				class="flex items-center justify-center gap-2 text-theme-400 hover:text-theme-300 transition-colors text-sm font-medium"
				onclick="event.stopPropagation();">
				<span>Show more details</span>
				<svg
					class="w-4 h-4"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9 5l7 7-7 7"></path>
				</svg>
			</a>
		</div>
	</div>
</article>

<script>
	// Handle mobile and desktop events for project cards
	document.addEventListener('DOMContentLoaded', function () {
		const projectCards = document.querySelectorAll('.project-card');
		let selectedCard: HTMLElement | null = null;
		let isMobile = window.innerWidth <= 768;
		let isGalleryPage = window.location.pathname.includes('/projects');

		// Update mobile detection on resize
		window.addEventListener('resize', () => {
			isMobile = window.innerWidth <= 768;
		});

		projectCards.forEach(card => {
			// Handle card selection (both mobile and desktop)
			card.addEventListener('click', function (this: HTMLElement, e: Event) {
				// Don't handle if clicking on links
				if ((e.target as HTMLElement).closest('a')) {
					return;
				}

				// On gallery page, only enable selection on mobile
				if (isGalleryPage && !isMobile) {
					return;
				}

				// Deselect previously selected card
				if (selectedCard && selectedCard !== this) {
					selectedCard.classList.remove('card-selected');
					const prevMobileLink = selectedCard.querySelector(
						'.mobile-detail-link'
					);
					const prevDesktopLink = selectedCard.querySelector(
						'.desktop-detail-link'
					);
					if (prevMobileLink) {
						prevMobileLink.classList.add('hidden');
					}
					if (prevDesktopLink) {
						prevDesktopLink.classList.remove('opacity-100');
						prevDesktopLink.classList.add('opacity-0');
					}
				}

				// Toggle selection for current card
				if (this.classList.contains('card-selected')) {
					// Deselect
					this.classList.remove('card-selected');
					const mobileLink = this.querySelector('.mobile-detail-link');
					const desktopLink = this.querySelector('.desktop-detail-link');
					if (mobileLink) {
						mobileLink.classList.add('hidden');
					}
					if (desktopLink) {
						desktopLink.classList.remove('opacity-100');
						desktopLink.classList.add('opacity-0');
					}
					selectedCard = null;
				} else {
					// Select
					this.classList.add('card-selected');
					const mobileLink = this.querySelector('.mobile-detail-link');
					const desktopLink = this.querySelector('.desktop-detail-link');
					if (mobileLink) {
						mobileLink.classList.remove('hidden');
					}
					if (desktopLink) {
						desktopLink.classList.remove('opacity-0');
						desktopLink.classList.add('opacity-100');
					}
					selectedCard = this;
				}
			});

			// Handle mouse leave (for desktop hover effects)
			card.addEventListener('mouseleave', function (this: HTMLElement) {
				this.classList.remove('group-hover');
			});
		});

		// Handle mobile touch events for tooltips
		const tooltipTriggers = document.querySelectorAll('.group\\/tooltip');

		tooltipTriggers.forEach(trigger => {
			let tooltipActive = false;

			// Handle touch start for tooltip
			trigger.addEventListener(
				'touchstart',
				function (this: HTMLElement, e: Event) {
					const touchEvent = e as TouchEvent;
					touchEvent.preventDefault();
					touchEvent.stopPropagation();

					if (tooltipActive) {
						// Hide tooltip if already active
						this.classList.remove('group-active/tooltip');
						tooltipActive = false;
					} else {
						// Show tooltip
						this.classList.add('group-active/tooltip');
						tooltipActive = true;
					}
				}
			);

			// Handle click outside to close tooltip
			document.addEventListener('click', function (e: Event) {
				if (!trigger.contains(e.target as Node)) {
					trigger.classList.remove('group-active/tooltip');
					tooltipActive = false;
				}
			});
		});

		// Handle click outside to deselect cards
		document.addEventListener('click', function (e: Event) {
			const target = e.target as HTMLElement;
			if (!target.closest('.project-card')) {
				if (selectedCard) {
					selectedCard.classList.remove('card-selected');
					const mobileLink = selectedCard.querySelector('.mobile-detail-link');
					const desktopLink = selectedCard.querySelector(
						'.desktop-detail-link'
					);
					if (mobileLink) {
						mobileLink.classList.add('hidden');
					}
					if (desktopLink) {
						desktopLink.classList.remove('opacity-100');
						desktopLink.classList.add('opacity-0');
					}
					selectedCard = null;
				}
			}
		});
	});
</script>

<style>
	@media (max-width: 768px) {
		.group .absolute.top-3.right-3 {
			opacity: 1 !important;
		}
	}

	/* Custom hover class for mobile */
	.group-hover .absolute.inset-0 {
		background-color: transparent !important;
	}

	.group-hover .absolute.top-3.right-3 {
		opacity: 1 !important;
	}

	/* Card selection styles for mobile and desktop */
	.card-selected {
		transform: scale(1.02) !important;
		box-shadow: 0 0 20px var(--color-theme-400-rgba-03) !important;
		border: 2px solid var(--color-theme-400) !important;
	}

	.card-selected .absolute.inset-0 {
		background-color: transparent !important;
	}

	.card-selected .absolute.top-3.right-3 {
		opacity: 1 !important;
	}

	/* Mobile detail link animation */
	.mobile-detail-link {
		animation: slideIn 0.3s ease-out;
	}

	/* Desktop detail link animation */
	.desktop-detail-link {
		animation: slideIn 0.3s ease-out;
	}

	@keyframes slideIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
