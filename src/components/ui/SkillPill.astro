---
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import { getSkillIconName } from '../../utils/icon-utils';

interface Props {
	skillName: string;
	size?: 'xs' | 'sm' | 'md' | 'lg';
	variant?: 'default' | 'dark' | 'theme';
	className?: string;
}

const {
	skillName,
	size = 'md',
	variant = 'default',
	className = '',
} = Astro.props;

// Clean the skill name by removing Obsidian link brackets
const cleanSkillName = skillName.replace(/\[\[|\]\]/g, '');

// Get the icon name for the skill by looking up the skill in the skills collection
async function findIconForSkill(skillName: string) {
	// Try to find the skill in the skills collection
	try {
		const skills = await getCollection('skills');
		const skill = skills.find(s => {
			// Check if skill name matches (from frontmatter or filename)
			const skillNameFromData = s.data.name || s.id.replace('.md', '');
			return skillNameFromData === skillName;
		});

		if (skill && skill.data.logoFileName) {
			// Use the logoFileName from the skill's frontmatter
			return getSkillIconName(skill.data.logoFileName);
		}

		// If skill is not found in the collection, log a helpful error message
		if (!skill) {
			console.error(`‚ùå Missing skill markdown file: "${skillName}"`);
			console.error(`   Create a file at: src/content/skills/${skillName}.md`);
			console.error(
				`   This skill is referenced in projects but the corresponding skill file is missing.`
			);
			console.error(
				`   The skill file should include a 'logoFileName' property in its frontmatter.`
			);
		}
	} catch (error) {
		// If skills collection is not available, continue to fallback methods
		console.warn('Could not access skills collection:', error);
	}

	// Fallback: try exact match as icon name
	let iconName = getSkillIconName(skillName + '.svg');
	if (iconName) {
		return iconName;
	}

	// Fallback: try lowercase as icon name
	iconName = getSkillIconName(skillName.toLowerCase() + '.svg');
	if (iconName) {
		return iconName;
	}

	return null;
}

const iconName = await findIconForSkill(cleanSkillName);

// Ensure icon name is lowercase for the Icon component
const finalIconName = iconName ? iconName.toLowerCase() : null;

// Size classes
const sizeClasses = {
	xs: {
		container: 'px-2 py-1 text-xs gap-1',
		icon: 'w-3 h-3',
		text: 'text-xs',
	},
	sm: {
		container: 'px-2.5 py-1.5 text-sm gap-1.5',
		icon: 'w-4 h-4',
		text: 'text-sm',
	},
	md: {
		container: 'px-3 py-2 text-sm gap-2',
		icon: 'w-5 h-5',
		text: 'text-sm',
	},
	lg: {
		container: 'px-4 py-2.5 text-base gap-2.5',
		icon: 'w-6 h-6',
		text: 'text-base',
	},
};

// Variant classes
const variantClasses = {
	default: 'bg-white text-gray-800 border border-gray-200 hover:bg-gray-50',
	dark: 'bg-gray-800 text-white border border-gray-700 hover:bg-gray-700',
	theme: 'bg-theme-400 text-black border border-theme-500 hover:bg-theme-500',
};

const baseClasses =
	'flex items-center rounded-full font-medium transition-colors duration-200 cursor-pointer';
const containerClasses = `${baseClasses} ${sizeClasses[size].container} ${variantClasses[variant]} ${className}`;
---

<span class={containerClasses} title={cleanSkillName}>
	{
		finalIconName ? (
			<Icon
				name={finalIconName}
				class={`${sizeClasses[size].icon} text-gray-600`}
			/>
		) : (
			<div
				class={`${sizeClasses[size].icon} bg-gray-300 rounded-full flex items-center justify-center text-gray-500 text-xs`}>
				?
			</div>
		)
	}
	<span class={`${sizeClasses[size].text} font-medium`}>
		{cleanSkillName}
	</span>
</span>
