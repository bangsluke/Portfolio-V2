---
import { Icon } from 'astro-icon/components';
import { AstroError } from 'astro/errors';
import { getCollection } from 'astro:content';

import GitHubContributions from '../portfolio/GitHubContributions.tsx';
import MostCommonTechs from '../portfolio/MostCommonTechs.astro';
import SkillsBubbles from '../portfolio/SkillsBubbles.astro';
import Heading from '../ui/Heading.astro';
import {
	getProjectCount,
	getProjectsUsingSkill,
} from '../../utils/project-count-utils';
import { extractNameFromFilename } from '../../utils/filename-utils';

const [staticData] = await getCollection('staticData');
const skills = await getCollection('skills');

if (!staticData) {
	throw new AstroError('JSON data not found');
}

// Process tech data for MostCommonTechs component
const projects = await getCollection('projects');

// Create an array of tech objects instead of separate objects
const techsArray: Array<{
	name: string;
	count: number;
	projects: string[];
	tags: string[];
}> = [];

// Get all unique technologies from projects
const allTechnologies = new Set<string>();
projects.forEach(project => {
	if (!project || !project.data) {
		return;
	}
	if (project.data.technologies) {
		project.data.technologies.forEach((tech: string) => {
			// Clean the technology name by removing Obsidian brackets
			const cleanTech = tech.replace(/\[\[|\]\]/g, '');

			// Skip "n/a" technologies
			if (cleanTech.toLowerCase() === 'n/a') {
				return;
			}

			allTechnologies.add(cleanTech);
		});
	}
});

// Count technology usage across all projects and find matching skills
allTechnologies.forEach(tech => {
	// @ts-expect-error - getProjectCount is not typed
	const count = getProjectCount(tech, tech, projects);
	// @ts-expect-error - getProjectsUsingSkill is not typed
	const projectsList = getProjectsUsingSkill(tech, tech, projects);

	// Improved skill matching logic
	let skillData = null;
	let tags: string[] = [];

	// Try exact match first (case-insensitive)
	skillData = skills.find(
		s => (s.data.name || s.slug).toLowerCase() === tech.toLowerCase()
	);

	// If no exact match, try normalized matches (remove special characters)
	if (!skillData) {
		const normalizedTech = tech.toLowerCase().replace(/[^a-z0-9]/g, '');
		skillData = skills.find(s => {
			const skillName = (s.data.name || s.slug)
				.toLowerCase()
				.replace(/[^a-z0-9]/g, '');
			return skillName === normalizedTech;
		});
	}

	// If still no match, try partial matches
	if (!skillData) {
		skillData = skills.find(s => {
			const skillName = (s.data.name || s.slug).toLowerCase();
			const techLower = tech.toLowerCase();

			// Check if skill name contains tech or vice versa
			return skillName.includes(techLower) || techLower.includes(skillName);
		});
	}

	// If still no match, try checking aliases
	if (!skillData) {
		skillData = skills.find(s => {
			const aliases = (s.data as any).aliases;
			return (
				aliases &&
				Array.isArray(aliases) &&
				aliases.some(
					(alias: string) => alias.toLowerCase() === tech.toLowerCase()
				)
			);
		});
	}

	if (skillData) {
		tags = skillData.data.tags || [];
	}

	// Add to techs array
	techsArray.push({
		name: tech,
		count,
		projects: projectsList,
		tags,
	});
});

// Sort by count (most used first)
techsArray.sort((a, b) => b.count - a.count);

// Create the final data structure
const techData = {
	techs: techsArray,
};
---

<section
	class="main-section pt-8 pb-12 md:pt-16"
	id="skills"
	aria-label="Coding section">
	<div class="flex gap-4 items-center justify-center mb-6">
		<Icon class="text-3xl dark:text-white text-blacktext" name="code" />
		<Heading text="Coding " textGradient="Skills" level={2} />
	</div>

	<div
		id="coding-section-layout"
		class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mx-auto max-w-7xl max-sm:gap-3 gap-4">
		<!-- Skills Bubbles - First element - takes up 2 rows on mobile, full first column on desktop -->
		<div
			class="row-span-2 md:col-span-1 rounded-2xl bg-linear-to-r from-theme-300 dark:from-theme-600 to-theme-50 dark:to-theme-200/5 hover:to-theme-300/30 dark:hover:to-theme-600/30 p-[.2rem] transition-all hover:shadow-[0_20px_50px_var(--color-theme-500-rgba-04)] dark:before:bg-[radial-gradient(circle,var(--color-theme-500)_0,var(--color-theme-950)_100%)] before:bg-[radial-gradient(circle,var(--color-theme-300)_0,var(--color-theme-200)_100%)] before:absolute before:left-1/2 before:bottom-30 before:h-[30%] before:aspect-square before:rounded-full before:blur-3xl before:opacity-70 before:transition before:-z-0 hover:before:animate-pulse xl:before:bottom-2/5 min-h-[500px] md:min-h-[600px]">
			<article
				class="group relative flex h-full flex-col justify-start overflow-hidden rounded-2xl bg-linear-to-tr from-light-theme-accent-100 to-theme-100 p-6 transition hover:shadow-[0_10px_50px_var(--color-theme-500-rgba-02)] dark:bg-linear-to-r dark:from-theme-900 dark:to-theme-950 dark:overflow-hidden">
				<!-- Header row - Skills title, buttons, and fullscreen icon -->
				<div
					class="flex items-center justify-between gap-4 max-md:gap-2 mb-4 flex-shrink-0">
					<div class="flex items-center gap-4 max-md:gap-2">
						<Icon
							class="text-3xl dark:text-white text-theme-500 max-md:text-2xl max-sm:text-sm"
							name="skill"
							aria-hidden="true"
						/>
						<Heading text="Skills" textGradient="" level={3} />
					</div>
					<div class="flex items-center gap-2">
						<!-- Reset Button -->
						<button
							id="skills-reset-btn"
							class="global-element global-button global-clear-button"
							title="Reset to default view - center graph and reset to skill rating sizing">
							Reset
						</button>

						<!-- Combined Toggle Button - Three States -->
						<button
							id="skills-toggle-btn"
							class="global-element global-button"
							title="Toggle between bubble chart (skill rating), bubble chart (project count), and list view">
							Toggle: Bubbles (Skill)
						</button>

						<button
							id="fullscreen-skills-btn"
							class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
							aria-label="Open skills chart in fullscreen"
							title="Fullscreen view">
							<svg
								class="w-5 h-5"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"
								></path>
							</svg>
						</button>
					</div>
				</div>

				<!-- Content area - fills remaining space -->
				<div class="flex-1 min-h-0 relative">
					<!-- Skills Bubbles View -->
					<div id="skills-bubbles-view" class="h-full">
						<SkillsBubbles />
					</div>

					<!-- Skills Table View - Visible by default for web scrapers but positioned absolutely to not affect layout -->
					<div
						id="skills-table-view"
						class="absolute inset-0 z-10 bg-white dark:bg-theme-950 rounded-2xl p-6 overflow-hidden">
						<!-- Debug: Skills count: {skills.length} -->
						<div class="overflow-x-auto overflow-y-auto h-full">
							<table class="w-full text-sm">
								<thead>
									<tr class="border-b border-gray-300 dark:border-gray-600">
										<th class="text-left py-2 px-3 font-semibold text-colour"
											>Name</th
										>
										<th class="text-left py-2 px-3 font-semibold text-colour"
											>Logo</th
										>
										<th class="text-left py-2 px-3 font-semibold text-colour"
											>Skill Rating</th
										>
										<th class="text-left py-2 px-3 font-semibold text-colour"
											>Project Count</th
										>
										<th class="text-left py-2 px-3 font-semibold text-colour"
											>Description</th
										>
									</tr>
								</thead>
								<tbody>
									{
										skills
											.sort(
												(a, b) =>
													(b.data.skillRating || 0) - (a.data.skillRating || 0)
											)
											.map(skill => (
												<tr class="border-b border-gray-200 dark:border-gray-700">
													<td class="py-2 px-3 font-medium text-colour">
														{extractNameFromFilename(skill.id || skill.slug)}
													</td>
													<td class="py-2 px-3">
														{skill.data.logoFileName ? (
															<img
																src={`/icons/${skill.data.logoFileName}`}
																alt={`${skill.data.name || skill.slug} icon`}
																class="w-6 h-6"
															/>
														) : (
															'-'
														)}
													</td>
													<td class="py-2 px-3 text-colour">
														{skill.data.skillRating
															? skill.data.skillRating
															: '-'}
													</td>
													<td class="py-2 px-3 text-colour">
														{(() => {
															// Calculate project count for this skill
															const skillName = skill.data.name || skill.slug;
															const skillId = skill.id.replace('.md', '');
															return projects.filter(project =>
																project.data.technologies?.some(
																	(tech: string) => {
																		const cleanTech = tech.replace(
																			/\[\[|\]\]/g,
																			''
																		);
																		return (
																			cleanTech.toLowerCase() ===
																			skillName.toLowerCase()
																		);
																	}
																)
															).length;
														})()}
													</td>
													<td class="py-2 px-3 text-colour">
														{skill.data.skillDescription
															? skill.data.skillDescription
															: '-'}
													</td>
												</tr>
											))
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</article>
		</div>

		<!-- GitHub Contributions - Second element - takes up 1 row on mobile, first row of second column on desktop -->
		<div
			class="row-span-1 md:col-span-1 rounded-2xl bg-linear-to-r from-theme-300 dark:from-theme-600 to-theme-50 dark:to-theme-200/5 hover:to-theme-300/30 dark:hover:to-theme-600/30 p-[.2rem] transition-all hover:shadow-[0_20px_50px_var(--color-theme-500-rgba-04)] dark:before:bg-[radial-gradient(circle,var(--color-theme-500)_0,var(--color-theme-950)_100%)] before:bg-[radial-gradient(circle,var(--color-theme-300)_0,var(--color-theme-200)_100%)] before:absolute before:left-1/2 before:bottom-30 before:h-[30%] before:aspect-square before:rounded-full before:blur-3xl before:opacity-70 before:transition before:-z-0 hover:before:animate-pulse xl:before:bottom-2/5 min-h-[250px] md:min-h-[200px]">
			<article
				class="group relative z-0 flex h-full w-full flex-col overflow-hidden rounded-2xl bg-linear-to-tr from-light-theme-accent-100 to-theme-100 p-6 transition hover:shadow-[0_10px_50px_rgba(13,188,130,0.2)] dark:bg-linear-to-r dark:from-theme-900 dark:to-theme-950 dark:overflow-hidden">
				<div class="flex items-center gap-4 max-md:gap-2 mb-4">
					<Icon
						class="text-3xl dark:text-white text-theme-500 max-md:text-2xl max-sm:text-sm"
						name="github"
						aria-hidden="true"
					/>
					<Heading text="GitHub" textGradient="Contributions" level={3} />
				</div>
				<div id="github-contributions" class="w-full">
					<GitHubContributions client:only="preact" />
				</div>
			</article>
		</div>

		<!-- Most Common Techs Used - Third element - takes up 1 row on mobile, second row of second column on desktop -->
		<div
			class="row-span-1 md:col-span-1 rounded-2xl bg-linear-to-r from-theme-300 dark:from-theme-600 to-theme-50 dark:to-theme-200/5 hover:to-theme-300/30 dark:hover:to-theme-600/30 p-[.2rem] transition-all hover:shadow-[0_20px_50px_var(--color-theme-500-rgba-04)] dark:before:bg-[radial-gradient(circle,var(--color-theme-500)_0,var(--color-theme-950)_100%)] before:bg-[radial-gradient(circle,var(--color-theme-300)_0,var(--color-theme-200)_100%)] before:absolute before:left-1/2 before:bottom-30 before:h-[30%] before:aspect-square before:rounded-full before:blur-3xl before:opacity-70 before:transition before:-z-0 hover:before:animate-pulse xl:before:bottom-2/5 min-h-[350px] md:min-h-[280px]">
			<article
				class="group relative z-0 flex h-full w-full flex-col overflow-hidden rounded-2xl bg-linear-to-tr from-light-theme-accent-100 to-theme-100 p-6 transition hover:shadow-[0_10px_50px_var(--color-theme-500-rgba-02)] dark:bg-linear-to-r dark:from-theme-900 dark:to-theme-950 dark:overflow-hidden">
				<!-- Header row - Techs title only -->
				<div class="flex items-center gap-4 max-md:gap-2 mb-2 flex-shrink-0">
					<Icon
						class="text-3xl dark:text-white text-theme-500 max-md:text-2xl max-sm:text-sm"
						name="tech"
						aria-hidden="true"
					/>
					<Heading text="Most Common" textGradient="Techs" level={3} />
				</div>

				<!-- No controls needed - static display only -->
				<!-- Content area - fills remaining space -->
				<div class="flex-1 min-h-0">
					<MostCommonTechs techData={techData} />
				</div>
			</article>
		</div>
	</div>
</section>

<!-- Section spacing handled by main-section padding -->

<script>
	// Skills section button functionality
	document.addEventListener('DOMContentLoaded', () => {
		const resetBtn = document.getElementById('skills-reset-btn');
		const toggleBtn = document.getElementById('skills-toggle-btn');
		let currentView = 'bubbles-skill'; // 'bubbles-skill', 'bubbles-project', 'list'

		// Initialize view state - show bubbles (skill rating)
		const bubblesView = document.getElementById('skills-bubbles-view');
		const tableView = document.getElementById('skills-table-view');
		if (bubblesView && tableView) {
			bubblesView.classList.remove('hidden');
			tableView.classList.add('hidden');
		}

		// Reset button functionality
		if (resetBtn) {
			resetBtn.addEventListener('click', () => {
				// Reset to default view (bubbles skill)
				currentView = 'bubbles-skill';
				if (toggleBtn) {
					toggleBtn.textContent = 'Toggle: Bubbles (Skill)';
					toggleBtn.title =
						'Toggle between bubble chart (skill rating), bubble chart (project count), and list view';
				}

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsReset', {
						detail: { currentView },
					})
				);
			});
		}

		// Combined Toggle Button functionality
		if (toggleBtn) {
			toggleBtn.addEventListener('click', () => {
				if (currentView === 'bubbles-skill') {
					currentView = 'bubbles-project';
					toggleBtn.textContent = 'Toggle: Bubbles (Project)';
					toggleBtn.title =
						'Toggle between bubble chart (project count) and list view';
					if (bubblesView) bubblesView.classList.remove('hidden');
					if (tableView) tableView.classList.add('hidden');
				} else if (currentView === 'bubbles-project') {
					currentView = 'list';
					toggleBtn.textContent = 'Toggle: List';
					toggleBtn.title = 'Show list view';
					if (bubblesView) bubblesView.classList.add('hidden');
					if (tableView) tableView.classList.remove('hidden');
				} else {
					// currentView === 'list'
					currentView = 'bubbles-skill';
					toggleBtn.textContent = 'Toggle: Bubbles (Skill)';
					toggleBtn.title =
						'Toggle between bubble chart (skill rating) and list view';
					if (bubblesView) bubblesView.classList.remove('hidden');
					if (tableView) tableView.classList.add('hidden');
				}

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsViewToggle', {
						detail: { currentView },
					})
				);
			});
		}
	});
</script>
