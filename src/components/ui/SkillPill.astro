---
import { getCollection } from 'astro:content';
import { getSkillIconName } from '../../utils/icon-utils';
import { extractNameFromFilename } from '../../utils/filename-utils';
import { getProjectCount } from '../../utils/project-count-utils';

interface Props {
	skillName: string;
	size?: 'xs' | 'sm' | 'md' | 'lg';
	variant?: 'default' | 'dark' | 'theme';
	className?: string;
	projects?: any[];
	disableTooltip?: boolean;
}

const {
	skillName,
	size = 'md',
	variant = 'default',
	className = '',
	projects = [],
	disableTooltip = false,
} = Astro.props;

// Clean the skill name by removing Obsidian link brackets and handling pipe aliases
function cleanSkillName(skillName: string) {
	// Remove Obsidian link brackets
	let cleaned = skillName.replace(/\[\[|\]\]/g, '');

	// Handle pipe aliases: if there's a pipe, use the part after it as the display name
	// but try to find the skill using the part before the pipe
	if (cleaned.includes('|')) {
		const [skillPath, displayName] = cleaned.split('|');
		// Extract just the filename from the path (last part after /)
		const skillNameFromPath = skillPath.split('/').pop() || skillPath;
		return {
			skillNameForLookup: skillNameFromPath,
			displayName: displayName || skillNameFromPath,
		};
	}

	return {
		skillNameForLookup: cleaned,
		displayName: cleaned,
	};
}

// Get the original filename for tooltip display
function getOriginalFileName(skillName: string) {
	// Remove Obsidian link brackets
	let cleaned = skillName.replace(/\[\[|\]\]/g, '');

	// Handle pipe aliases: use the part before the pipe
	if (cleaned.includes('|')) {
		const [skillPath] = cleaned.split('|');
		// Extract just the filename from the path (last part after /)
		const skillNameFromPath = skillPath.split('/').pop() || skillPath;
		return skillNameFromPath;
	}

	return cleaned;
}

// Get the icon name for the skill by looking up the skill in the skills collection
async function findIconForSkill(skillName: string) {
	// Clean the skill name and get lookup/display names
	const { skillNameForLookup, displayName } = cleanSkillName(skillName);

	// Try to find the skill in the skills collection
	try {
		const skills = await getCollection('skills');
		const skill = skills.find(s => {
			// Check if skill name matches (from frontmatter or filename)
			const skillNameFromData = s.data.name || extractNameFromFilename(s.id);
			return skillNameFromData === skillNameForLookup;
		});

		if (skill && skill.data.logoFileName) {
			// Use the logoFileName from the skill's frontmatter
			return getSkillIconName(skill.data.logoFileName);
		}

		// If skill is not found in the collection, log a helpful error message
		if (!skill) {
			console.error(`❌ Missing skill markdown file: "${skillNameForLookup}"`);
			console.error(
				`   Create a file at: src/content/skills/${skillNameForLookup}.md`
			);
			console.error(
				`   This skill is referenced in projects but the corresponding skill file is missing.`
			);
			console.error(
				`   The skill file should include a 'logoFileName' property in its frontmatter.`
			);
		}
	} catch (error) {
		// If skills collection is not available, continue to fallback methods
		console.warn('Could not access skills collection:', error);
	}

	// Fallback: try exact match as icon name
	let iconName = getSkillIconName(skillNameForLookup + '.svg');
	if (iconName) {
		return iconName;
	}

	// Fallback: try lowercase as icon name
	iconName = getSkillIconName(skillNameForLookup.toLowerCase() + '.svg');
	if (iconName) {
		return iconName;
	}

	return null;
}

const cleanedSkill = cleanSkillName(skillName);
const iconName = await findIconForSkill(skillName);
const originalFileName = getOriginalFileName(skillName);

// Calculate project count for tooltip
const skillId = extractNameFromFilename(originalFileName);
const projectCount =
	projects.length > 0
		? getProjectCount(cleanedSkill.skillNameForLookup, skillId, projects)
		: 0;

// Ensure icon name is lowercase for the Icon component
const finalIconName = iconName ? iconName.toLowerCase() : null;

// Size classes
const sizeClasses = {
	xs: {
		container: 'px-2 py-1 text-xs gap-1 h-6',
		icon: 'w-3 h-3 min-h-[12px] max-h-[12px]',
		text: 'text-xs',
	},
	sm: {
		container: 'px-2.5 py-1.5 text-sm gap-1.5 h-8',
		icon: 'w-4 h-4 min-h-[16px] max-h-[16px]',
		text: 'text-sm',
	},
	md: {
		container: 'px-3 py-2 text-sm gap-2 h-10',
		icon: 'w-5 h-5 min-h-[20px] max-h-[20px]',
		text: 'text-sm',
	},
	lg: {
		container: 'px-4 py-2.5 text-base gap-2.5 h-12',
		icon: 'w-6 h-6 min-h-[24px] max-h-[24px]',
		text: 'text-base',
	},
};

// Variant classes
const variantClasses = {
	default: 'bg-white text-gray-800 border border-gray-200 hover:bg-gray-50',
	dark: 'dark:text-theme-50 text-blacktext bg-gray-800 border border-gray-700 hover:bg-gray-700',
	theme:
		'dark:bg-zinc-800 bg-white text-blacktext dark:text-theme-50  border border-theme-500 hover:bg-theme-500 dark:hover:bg-theme-600',
};

const baseClasses =
	'flex items-center justify-center rounded-full font-medium transition-colors duration-200 cursor-help';
const containerClasses = `${baseClasses} ${sizeClasses[size].container} ${variantClasses[variant]} ${className}`;
---

<div class="relative group/skill">
	<span
		class={containerClasses}
		title={disableTooltip
			? ''
			: projectCount > 0
				? `Used in ${projectCount} project${projectCount === 1 ? '' : 's'}`
				: 'Not used in any projects'}>
		{
			finalIconName ? (
				<img
					src={`/icons/${finalIconName}.svg`}
					alt={`${cleanedSkill.displayName} icon`}
					class={`${sizeClasses[size].icon} text-gray-600`}
				/>
			) : (
				<div
					class={`${sizeClasses[size].icon} bg-gray-300 rounded-full flex items-center justify-center text-gray-500 text-xs min-h-full`}>
					?
				</div>
			)
		}
		<span class={`${sizeClasses[size].text} font-medium`}>
			{cleanedSkill.displayName}
		</span>
	</span>

	<!-- Mobile tooltip -->
	{
		!disableTooltip && (
			<div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover/skill:opacity-100 group-active/skill:opacity-100 transition-opacity duration-200 pointer-events-none z-50 md:hidden">
				<div class="global-tooltip">
					<div class="global-tooltip-content">
						{projectCount > 0
							? `Used in ${projectCount} project${projectCount === 1 ? '' : 's'}`
							: 'Not used in any projects'}
					</div>
					<div class="absolute left-1/2 transform -translate-x-1/2 global-tooltip-arrow global-tooltip-arrow-top" />
				</div>
			</div>
		)
	}
</div>

<script>
	// Handle mobile touch events for skill pills
	document.addEventListener('DOMContentLoaded', function () {
		const skillPills = document.querySelectorAll('.group\\/skill');

		skillPills.forEach(pill => {
			let tooltipActive = false;

			// Handle touch start for tooltip
			pill.addEventListener(
				'touchstart',
				function (this: HTMLElement, e: Event) {
					const touchEvent = e as TouchEvent;
					touchEvent.preventDefault();
					touchEvent.stopPropagation();

					if (tooltipActive) {
						// Hide tooltip if already active
						this.classList.remove('group-active/skill');
						tooltipActive = false;
					} else {
						// Show tooltip
						this.classList.add('group-active/skill');
						tooltipActive = true;
					}
				}
			);

			// Handle click outside to close tooltip
			document.addEventListener('click', function (e: Event) {
				if (!pill.contains(e.target as Node)) {
					pill.classList.remove('group-active/skill');
					tooltipActive = false;
				}
			});
		});
	});
</script>
