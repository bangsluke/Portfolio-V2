---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Get all companies and sort by date
const companies = await getCollection('companies');
const sortedCompanies = companies
  .filter(company => company.data.published !== false)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Get unique tags
const allTags = [...new Set(sortedCompanies.flatMap(company => company.data.tags || []))];
---

<Layout title="Companies">
  <main class="container mx-auto px-4 py-8 max-w-6xl">
    <header class="mb-12 text-center">
      <h1 class="text-5xl font-bold mb-4">Companies</h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        A collection of companies and organizations I've had the privilege to work with and learn from.
      </p>
    </header>

    <!-- Search and Filter -->
    <div class="mb-8 flex flex-col sm:flex-row gap-4 items-center justify-between">
      <div class="relative flex-1 max-w-md">
        <input
          type="text"
          id="search"
          placeholder="Search companies..."
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <svg class="absolute right-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <div class="flex flex-wrap gap-2">
        <button
          class="tag-filter px-3 py-1 rounded-full text-sm border border-gray-300 hover:bg-gray-100 active"
          data-tag="all"
        >
          All
        </button>
        {allTags.map(tag => (
          <button
            class="tag-filter px-3 py-1 rounded-full text-sm border border-gray-300 hover:bg-gray-100"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>

    <!-- Companies Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="companies-grid">
      {sortedCompanies.map((company) => (
        <article 
          class="company-card bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 border border-gray-200 overflow-hidden"
          data-tags={company.data.tags?.join(' ') || ''}
          data-title={company.data.title.toLowerCase()}
        >
          <div class="p-6">
            <header class="mb-4">
              <h2 class="text-xl font-semibold mb-2">
                <a href={`/companies/${company.slug}`} class="text-gray-900 hover:text-blue-600 transition-colors">
                  {company.data.title}
                </a>
              </h2>
              <div class="flex items-center gap-4 text-sm text-gray-500">
                <time datetime={company.data.date.toISOString()}>
                  {company.data.date.toLocaleDateString()}
                </time>
                {company.data.tags && company.data.tags.length > 0 && (
                  <div class="flex gap-1">
                    {company.data.tags.slice(0, 2).map((tag) => (
                      <span class="bg-blue-100 text-blue-800 px-2 py-0.5 rounded text-xs font-medium">
                        {tag}
                      </span>
                    ))}
                    {company.data.tags.length > 2 && (
                      <span class="text-xs text-gray-400">+{company.data.tags.length - 2}</span>
                    )}
                  </div>
                )}
              </div>
            </header>
            
            {company.data.description && (
              <p class="text-gray-600 text-sm line-clamp-3 mb-4">
                {company.data.description}
              </p>
            )}
            
            <footer class="flex justify-between items-center">
              <a 
                href={`/companies/${company.slug}`}
                class="text-blue-600 hover:text-blue-800 text-sm font-medium"
              >
                View Details â†’
              </a>
            </footer>
          </div>
        </article>
      ))}
    </div>

    <!-- Empty State -->
    <div id="empty-state" class="hidden text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">No companies found</h3>
      <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
    </div>
  </main>
</Layout>

<script>
  // Search and filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const tagFilters = document.querySelectorAll('.tag-filter');
    const companiesGrid = document.getElementById('companies-grid');
    const emptyState = document.getElementById('empty-state');
    const companyCards = document.querySelectorAll('.company-card');

    let currentSearch = '';
    let currentTag = 'all';

    function filterCompanies() {
      let visibleCount = 0;

      companyCards.forEach(card => {
        const title = card.dataset.title || '';
        const tags = card.dataset.tags || '';
        
        const matchesSearch = title.includes(currentSearch.toLowerCase());
        const matchesTag = currentTag === 'all' || tags.includes(currentTag);
        
        if (matchesSearch && matchesTag) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Show/hide empty state
      if (visibleCount === 0) {
        emptyState.classList.remove('hidden');
        companiesGrid.classList.add('hidden');
      } else {
        emptyState.classList.add('hidden');
        companiesGrid.classList.remove('hidden');
      }
    }

    // Search functionality
    searchInput.addEventListener('input', function(e) {
      currentSearch = e.target.value;
      filterCompanies();
    });

    // Tag filter functionality
    tagFilters.forEach(filter => {
      filter.addEventListener('click', function() {
        // Update active state
        tagFilters.forEach(f => f.classList.remove('active', 'bg-blue-100', 'border-blue-300'));
        this.classList.add('active', 'bg-blue-100', 'border-blue-300');
        
        currentTag = this.dataset.tag;
        filterCompanies();
      });
    });
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .tag-filter.active {
    background-color: rgb(219 234 254);
    border-color: rgb(147 197 253);
    color: rgb(29 78 216);
  }
</style> 