---
import { Icon } from 'astro-icon/components';
---

<button
	id="themeToggle"
	class="hover:cursor-pointer hover:text-theme-400 hover:scale-150 transition-all">
	<Icon name="sun" class="sun" />
	<Icon name="moon" class="moon" />
</button>

<style>
	#themeToggle {
		border: 0;
		background: none;
	}
	.sun {
		display: block;
	}
	.moon {
		display: none;
	}

	:global(.dark) .sun {
		display: none;
	}
	:global(.dark) .moon {
		display: block;
	}
</style>

<script is:inline>
	// Initialize theme on page load
	function initializeTheme() {
		// Check if user has already made a choice (stored in localStorage)
		if ('theme' in localStorage) {
			// User has made a choice before, use their stored preference
			document.documentElement.classList.toggle(
				'dark',
				localStorage.theme === 'dark'
			);
		} else {
			// First time visit - use OS preference but don't store it
			const prefersDark = window.matchMedia(
				'(prefers-color-scheme: dark)'
			).matches;
			document.documentElement.classList.toggle('dark', prefersDark);
		}

		// Trigger a custom event to notify ThemeDisplay component
		window.dispatchEvent(
			new CustomEvent('themeInitialized', {
				detail: { theme: getCurrentTheme() },
			})
		);
	}

	// Get current theme state
	function getCurrentTheme() {
		if ('theme' in localStorage) {
			return localStorage.theme;
		} else {
			// No stored preference, return current OS preference
			return window.matchMedia('(prefers-color-scheme: dark)').matches
				? 'dark'
				: 'light';
		}
	}

	// Run initialization when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeTheme);
	} else {
		initializeTheme();
	}

	// Listen for changes in system preferences (only if user hasn't made a choice)
	window
		.matchMedia('(prefers-color-scheme: dark)')
		.addEventListener('change', e => {
			// Only update theme if user hasn't made a choice yet
			if (!('theme' in localStorage)) {
				document.documentElement.classList.toggle('dark', e.matches);

				// Trigger event for ThemeDisplay update
				window.dispatchEvent(
					new CustomEvent('themeChanged', {
						detail: { theme: e.matches ? 'dark' : 'light' },
					})
				);
			}
		});

	const handleToggleClick = () => {
		const element = document.documentElement;
		const isDark = element.classList.contains('dark');
		const newTheme = isDark ? 'light' : 'dark';

		// Toggle the theme
		element.classList.toggle('dark');

		// Store the user's choice in localStorage
		localStorage.theme = newTheme;

		console.log('Theme toggled to:', newTheme);

		// Trigger event for ThemeDisplay update
		window.dispatchEvent(
			new CustomEvent('themeChanged', {
				detail: { theme: newTheme },
			})
		);
	};

	document
		.getElementById('themeToggle')
		.addEventListener('click', handleToggleClick);
</script>
