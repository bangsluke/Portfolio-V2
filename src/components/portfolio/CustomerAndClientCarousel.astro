---
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import { extractNameFromFilename } from '../../utils/filename-utils';
import Heading from '../ui/Heading.astro';
import ClientAndCustomerCarousel from './CustomerAndClientCarousel.tsx';

// Get all companies and clients from the local content folders
const companies = await getCollection('companies');
const clients = await getCollection('clients');

// Sort companies by dateStart date (newest first)
const sortedCompanies = companies.sort((a, b) => {
	// Sort by dateStart
	const dateA = a.data.dateStart || new Date(0);
	const dateB = b.data.dateStart || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting by slug
	return a.slug.localeCompare(b.slug);
});

// Sort clients by dateStart date (newest first)
const sortedClients = clients.sort((a, b) => {
	// Sort by dateStart
	const dateA = a.data.dateStart || new Date(0);
	const dateB = b.data.dateStart || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting by name
	return (a.data.name || a.slug).localeCompare(b.data.name || b.slug);
});

// Filter companies with logos
const companiesWithLogos = sortedCompanies.filter(
	company => company.data.logoURL && company.data.logoURL.trim() !== ''
);

// Filter clients with logos
const clientsWithLogos = sortedClients.filter(
	client => client.data.logoURL && client.data.logoURL.trim() !== ''
);

// Clean the company data to only include necessary fields
const cleanedCompanies = companiesWithLogos.map(company => ({
	id: company.id,
	slug: company.slug,
	type: 'company' as const,
	data: {
		name: extractNameFromFilename(company.id), // Use filename without extension
		logoURL: company.data.logoURL,
		dateStart: company.data.dateStart,
		dateEnd: company.data.dateEnd,
	},
}));

// Clean the client data to only include necessary fields
const cleanedClients = clientsWithLogos.map(client => ({
	id: client.id,
	slug: client.slug,
	type: 'client' as const,
	data: {
		name: client.data.name || extractNameFromFilename(client.id), // Use filename without extension if no name
		logoURL: client.data.logoURL, // Use logoURL directly
		dateStart: client.data.dateStart,
		dateEnd: client.data.dateEnd,
		linkedCompany: client.data.linkedCompany,
	},
}));

// Combine companies and clients, sorted by date
const allItems = [...cleanedCompanies, ...cleanedClients].sort((a, b) => {
	const dateA = a.data.dateStart || new Date(0);
	const dateB = b.data.dateStart || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting
	const nameA = a.type === 'company' ? a.slug : a.data.name || a.slug;
	const nameB = b.type === 'company' ? b.slug : b.data.name || b.slug;
	return nameA.localeCompare(nameB);
});

// Convert to JSON for the TypeScript component
const itemsJson = JSON.stringify(allItems);
---

<section
	class="py-8 px-8 max-md:py-4 mb-4 scroll-m-16"
	id="customers-and-clients">
	<div class="flex flex-col pt-8 w-[90vw] mx-auto">
		<div class="flex gap-4 items-center justify-center">
			<Icon class="text-3xl dark:text-white text-blacktext" name="company" />
			<Heading text="Customers and " textGradient="Clients" level={2} />
		</div>

		<div class="relative">
			<ClientAndCustomerCarousel companies={itemsJson} client:load />
		</div>
	</div>
</section>
