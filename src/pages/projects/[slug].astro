---
import { getCollection } from 'astro:content';
import CustomerAndClientCard from './CustomerAndClientCard.astro';
import SkillPill from '../../components/ui/SkillPill.astro';
import Layout from '../../layouts/Layout.astro';
import {
	processContent,
	processObsidianLink,
} from '../../utils/content-processor';
import { extractNameFromFilename } from '../../utils/filename-utils';

export async function getStaticPaths() {
	const projects = await getCollection('projects');

	return projects.map(project => {
		// Use name from frontmatter (generated by sync process)
		const projectData = {
			...project.data,
			name: project.data.name,
		};

		return {
			params: { slug: project.slug },
			props: {
				project: {
					...project,
					data: projectData,
				},
			},
		};
	});
}

const { project } = Astro.props;
const { data } = project;

// Get all projects for SkillPill tooltips
const allProjects = await getCollection('projects');

// Process content to handle Obsidian links and markdown
const processedLongDescription = processContent(data.longDescription);
const processedLessonsLearned = processContent(data.lessonsLearned);

// Get linked companies and clients
let linkedCompanies: any[] = [];
let linkedClients: any[] = [];

try {
	const companies = await getCollection('companies');
	const clients = await getCollection('clients');

	// Check each linked company/client
	(data.linkedCompany || []).forEach(linkedItem => {
		const linkedName = processObsidianLink(linkedItem);

		// First try to find in companies
		const company = companies.find(
			company => extractNameFromFilename(company.id) === linkedName
		);

		if (company) {
			linkedCompanies.push(company);
		} else {
			// If not found in companies, try clients
			const client = clients.find(
				client => extractNameFromFilename(client.id) === linkedName
			);

			if (client) {
				linkedClients.push(client);
			}
		}
	});
} catch (error) {
	console.error('Error fetching linked companies/clients:', error);
}

// Helper to get company name from frontmatter or fallback to filename minus extension
function getCompanyName(company: any) {
	if (company.data.name && company.data.name.trim() !== '') {
		return company.data.name;
	}
	// Fallback to filename minus .md extension
	return extractNameFromFilename(company.id);
}

// Helper to format date range for display
function formatDateRange(dateStart: any, dateEnd: any) {
	if (!dateStart) return '';

	const startDate = new Date(dateStart).toLocaleDateString('en-US', {
		month: 'short',
		year: 'numeric',
	});

	// Check if dateEnd is falsy, empty, or a non-date value like "TBD"
	if (
		!dateEnd ||
		dateEnd === '' ||
		dateEnd === 'TBD' ||
		isNaN(new Date(dateEnd).getTime())
	) {
		return `${startDate} - Present`;
	}

	const endDate = new Date(dateEnd).toLocaleDateString('en-US', {
		month: 'short',
		year: 'numeric',
	});

	return `${startDate} - ${endDate}`;
}

const pageTitle = data.name + ' Project - bangsluke Portfolio';
const description = data.shortDescription;
const ogimage = {
	url: '/images/imagedefault.webp',
	alt: data.name + ' Project - bangsluke Portfolio',
};
---

<Layout pageTitle={pageTitle} description={description} ogimage={ogimage}>
	<div
		class="min-h-screen background: linear-gradient(45deg, var(--color-theme-500-rgba-001) 10.79%, var(--color-theme-500-rgba-003) 40.92%, var(--color-theme-500-rgba-001) 90.35%)">
		<!-- Top Back Button -->
		<div class="py-8 px-8">
			<div class="max-w-4xl mx-auto">
				<div class="text-center">
					<a
						id="back-to-projects-top"
						href="/#projects"
						class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
						<svg
							class="w-5 h-5 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Projects
					</a>
				</div>
			</div>
		</div>

		<!-- Project Image -->
		<div class="px-8 mb-8">
			<div class="max-w-5xl mx-auto">
				<div class="flex justify-center">
					<img
						src={data.imageURL || '/images/imagedefault.webp'}
						alt={data.name}
						class="w-full max-w-5xl h-[422px] object-cover object-top rounded-2xl shadow-2xl"
					/>
				</div>
			</div>
		</div>

		<!-- Project Name, Date Range, and Technologies -->
		<div class="px-8 mb-12">
			<div class="max-w-4xl mx-auto">
				<div class="text-center">
					<h1 class="text-5xl font-bold mb-4 text-colour">
						{data.name}
					</h1>

					{/* Date Range */}
					{
						data.dateStart && (
							<div class="mb-6">
								<p class="text-lg text-colour">
									{new Date(data.dateStart).toLocaleDateString('en-US', {
										month: 'short',
										year: 'numeric',
									})}{' '}
									{data.dateEnd
										? `- ${new Date(data.dateEnd).toLocaleDateString('en-US', {
												month: 'short',
												year: 'numeric',
											})}`
										: '- Present'}
								</p>
							</div>
						)
					}

					{/* Project Category */}
					{
						data.projectCategory && (
							<div class="mb-6">
								<span class="text-lg text-colour mr-3">Category:</span>
								<a
									href={`/projects?category=${encodeURIComponent(data.projectCategory)}`}
									class="inline-block bg-theme-400 hover:bg-theme-500 text-black font-bold px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg">
									{data.projectCategory}
								</a>
							</div>
						)
					}

					{/* Technologies */}
					<div class="flex flex-wrap justify-center gap-3">
						{
							data.technologies &&
								data.technologies
									.filter((tech: string) => {
										const cleanTech = tech.replace(/\[\[|\]\]/g, '');
										return cleanTech.toLowerCase() !== 'n/a';
									})
									.map((tech: string) => {
										const cleanTech = tech.replace(/\[|\]/g, '');
										return (
											<SkillPill
												skillName={cleanTech}
												variant="theme"
												size="md"
												className="shadow-lg"
												projects={allProjects}
											/>
										);
									})
						}
					</div>
				</div>
			</div>
		</div>

		<!-- Description Section -->
		{
			data.longDescription && (
				<section class="px-8 mb-6 md:mb-12 pb-6 md:pb-0">
					<div class="max-w-4xl mx-auto">
						<h2 class="text-3xl font-bold mb-6 text-colour">Description</h2>
						<div class="bg-white dark:bg-zinc-900 rounded-2xl p-8 shadow-lg">
							<div
								class="text-lg text-colour leading-relaxed processed-content"
								set:html={processedLongDescription}
							/>
						</div>
					</div>
				</section>
			)
		}

		<!-- Lessons Learned Section -->
		{
			data.lessonsLearned && (
				<section class="px-8 mb-6 md:mb-12 pb-6 md:pb-0">
					<div class="max-w-4xl mx-auto">
						<h2 class="text-3xl font-bold mb-6 text-colour">Lessons Learned</h2>
						<div class="bg-white dark:bg-zinc-900 rounded-2xl p-8 shadow-lg">
							<div
								class="text-lg text-colour leading-relaxed processed-content"
								set:html={processedLessonsLearned}
							/>
						</div>
					</div>
				</section>
			)
		}

		<!-- Linked Company/Client Section -->
		{
			data.linkedCompany &&
				data.linkedCompany.length > 0 &&
				(linkedCompanies.length > 0 || linkedClients.length > 0) && (
					<section class="px-8 mb-6 md:mb-12">
						<div class="max-w-4xl mx-auto">
							<div class="text-center">
								<h2 class="text-3xl font-bold mb-6 text-colour">
									Developed For
								</h2>
								<div class="flex flex-wrap justify-center gap-6">
									{linkedCompanies.map(company => (
										<CustomerAndClientCard
											name={getCompanyName(company)}
											logoURL={company.data.logoURL || undefined}
										/>
									))}
									{linkedClients.map(client => (
										<CustomerAndClientCard
											name={getCompanyName(client)}
											logoURL={client.data.logoURL || undefined}
										/>
									))}
								</div>
							</div>
						</div>
					</section>
				)
		}

		<!-- Project Links -->
		{
			(data.projectURL || data.codeURL) && (
				<section class="px-8 mb-6 md:mb-12">
					<div class="max-w-4xl mx-auto">
						<div class="flex text-center gap-4 justify-center items-center">
							<span class="text-lg text-colour">Project Links:</span>
							<div class="flex flex-wrap gap-4 justify-center items-start">
								{data.projectURL && (
									<a
										href={data.projectURL}
										target="_blank"
										rel="noopener noreferrer"
										class="bg-theme-400 hover:bg-theme-500 text-black font-bold px-8 py-3 mb-6 md:mb-0 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg inline-flex items-center">
										<svg
											class="w-5 h-5 mr-2"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24">
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
											/>
										</svg>
										Visit Site
									</a>
								)}
								{data.codeURL && (
									<a
										href={data.codeURL}
										target="_blank"
										rel="noopener noreferrer"
										class="bg-white dark:bg-zinc-900 hover:bg-theme-700/30 text-colour font-bold px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg inline-flex items-center">
										<svg
											class="w-5 h-5 mr-2"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24">
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
											/>
										</svg>
										View Code
									</a>
								)}
							</div>
						</div>
					</div>
				</section>
			)
		}

		<!-- Bottom Back Button -->
		<div class="px-8 py-8 pb-8">
			<div class="max-w-4xl mx-auto">
				<div class="text-center">
					<a
						id="back-to-projects-bottom"
						href="/#projects"
						class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
						<svg
							class="w-5 h-5 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Projects
					</a>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	// Handle intelligent "Back to Projects" navigation
	document.addEventListener('DOMContentLoaded', function () {
		const backButtons = [
			document.getElementById('back-to-projects-top'),
			document.getElementById('back-to-projects-bottom'),
		];

		// Get the referrer URL
		const referrer = document.referrer;

		// Determine the correct back URL based on referrer
		let backUrl = '/#projects'; // Default fallback

		if (referrer) {
			const referrerUrl = new URL(referrer);

			// If user came from the main site with projects anchor
			if (referrerUrl.pathname === '/' && referrerUrl.hash === '#projects') {
				backUrl = '/#projects';
			}
			// If user came from the projects page
			else if (referrerUrl.pathname === '/projects') {
				backUrl = '/projects';
			}
			// If user came from another project page (projects/[slug])
			else if (referrerUrl.pathname.startsWith('/projects/')) {
				backUrl = '/projects';
			}
			// For any other case, default to main site projects section
			else {
				backUrl = '/#projects';
			}
		}

		// Update both back buttons with the correct URL
		backButtons.forEach(button => {
			if (button && button instanceof HTMLAnchorElement) {
				button.href = backUrl;
			}
		});
	});
</script>
