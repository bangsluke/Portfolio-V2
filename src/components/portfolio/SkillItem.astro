---
import { processContent } from '../../utils/content-processor';
import { getSkillIconName } from '../../utils/icon-utils';

interface Props {
	name: string;
	skillRating?: number;
	skillDescription?: string;
	logoFileName?: string | null;
}

const { name, skillRating, skillDescription, logoFileName } = Astro.props;

// Process content to handle Obsidian links and markdown
const processedSkillDescription = processContent(skillDescription || '');
---

<div
	class="relative mx-12 pb-12 grid md:grid-cols-5 md:gap-10 before:absolute before:left-[-35px] before:block before:h-full before:border-l-2 before:border-black/20 dark:before:border-white/15 before:content-['']">
	<div class="pb-12 md:col-span-2">
		<div class="sticky top-0">
			<span
				class="absolute -left-[42px] text-5xl text-theme-400 rounded-full drop-shadow-[0px_0px_8px_rgba(0,255,94,1)]"
				>&bull;</span
			>
			<div class="flex items-center gap-3">
				{/* Skill Icon */}
				{
					(() => {
						const iconName = getSkillIconName(logoFileName || null);
						if (iconName) {
							return (
								<div class="relative group/tooltip">
									<img
										src={`/icons/${iconName}.svg`}
										alt={`${name} icon`}
										class="w-8 h-8 cursor-help"
									/>
									<div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover/tooltip:opacity-100 transition-opacity duration-200 pointer-events-none z-50">
										<div class="global-tooltip">
											<div class="global-tooltip-content">{name}</div>
											<div class="absolute left-1/2 transform -translate-x-1/2 global-tooltip-arrow global-tooltip-arrow-top" />
										</div>
									</div>
								</div>
							);
						}
						// Show a placeholder for missing icons
						if (logoFileName) {
							return (
								<div class="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded flex items-center justify-center text-xs text-gray-500 dark:text-gray-400">
									?
								</div>
							);
						}
						return null;
					})()
				}
				<h3 class="text-xl font-bold text-theme-400">
					{name}
				</h3>
			</div>
			{
				skillRating && (
					<div class="mt-2">
						<span class="text-sm text-zinc-600 dark:text-white">Rating: </span>
						<div class="flex items-center mt-1">
							{Array.from({ length: 5 }, (_, i) => (
								<span
									class={`text-lg ${i < skillRating ? 'text-yellow-400' : 'text-gray-300'}`}>
									â˜…
								</span>
							))}
							<span class="ml-2 text-sm text-zinc-600 dark:text-white">
								({skillRating}/5)
							</span>
						</div>
					</div>
				)
			}
		</div>
	</div>
	<div
		class="flex flex-col gap-2 pb-4 text-zinc-00 dark:text-zinc-300 md:col-span-3">
		{
			processedSkillDescription && (
				<div class="processed-content" set:html={processedSkillDescription} />
			)
		}
	</div>
</div>
