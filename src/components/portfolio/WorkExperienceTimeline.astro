---
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import { processObsidianLink } from '../../utils/content-processor';
import { extractNameFromFilename } from '../../utils/filename-utils';
import Heading from '../ui/Heading.astro';
import WorkExperienceItem from './WorkExperienceItem.astro';

// Get all roles, companies, and clients from the local content folder
const roles = await getCollection('roles');
const companies = await getCollection('companies');
const clients = await getCollection('clients');

// Process company data for each role
const rolesWithCompanyData = await Promise.all(
	roles.map(async role => {
		let companyLogoURL = null;
		let processedLinkedCompany = '';
		let allCompanyLogos: { logoURL: string | null; name: string }[] = [];

		if (role.data.linkedCompany && role.data.linkedCompany.length > 0) {
			// Process the first company for display
			processedLinkedCompany = processObsidianLink(role.data.linkedCompany[0]);

			// Get company/client logos for all linked entities
			allCompanyLogos = await Promise.all(
				role.data.linkedCompany.map(async companyLink => {
					let logoURL: string | null = null;
					// Extract company/client name from Obsidian link format [[Company Name]]
					const entityName = companyLink.replace(/\[\[(.*?)\]\]/, '$1');

					// First try to find in companies collection
					const company = companies.find(
						company => company.id === extractNameFromFilename(entityName)
					);

					if (company && company.data.logoURL) {
						logoURL = company.data.logoURL;
					} else {
						// If not found in companies, try clients collection
						const client = clients.find(
							client => client.id === extractNameFromFilename(entityName)
						);

						if (client && client.data.logoURL) {
							logoURL = client.data.logoURL;
						}
					}

					return {
						logoURL,
						name: entityName,
					};
				})
			);

			// Get company logo for the first company
			if (allCompanyLogos.length > 0) {
				companyLogoURL = allCompanyLogos[0].logoURL;
			}
		}

		return {
			...role,
			companyLogoURL,
			processedLinkedCompany,
			allCompanyLogos,
		};
	})
);

// Filter out roles with "voluntary" tag
const nonVoluntaryRoles = rolesWithCompanyData.filter(
	role => !role.data.tags || !role.data.tags.includes('voluntary')
);

// Sort roles by dateStart date (newest first)
const sortedRoles = nonVoluntaryRoles.sort((a, b) => {
	// Sort by dateStart date, fallback to dateEnd date, then alphabetically
	const dateA = a.data.dateStart || a.data.dateEnd || new Date(0);
	const dateB = b.data.dateStart || b.data.dateEnd || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting by slug (filename)
	return a.slug.localeCompare(b.slug);
});

// Show only the first 3 items
const displayedRoles = sortedRoles.slice(0, 3);
const hasMoreItems = sortedRoles.length > 3;
---

<section class="py-8 px-8 max-md:py-4 mb-4 scroll-m-16" id="experience">
	<div class="flex flex-col pt-8 max-w-4xl mx-auto">
		<div class="flex gap-4 items-center justify-center">
			<Icon class="text-3xl dark:text-white text-blacktext" name="briefcase" />
			<Heading text="Work" textGradient="Experience" level={2} />
		</div>

		<div
			class="relative max-md:mt-0 mt-8 group"
			aria-label="Professional experience">
			<ol class="relative mt-10">
				{
					displayedRoles.map((role, index) => (
						<li>
							<article
								role="article"
								aria-labelledby={`experience-title-${index}`}>
								<div
									class="flex flex-col gap-2  text-zinc-00 dark:text-zinc-300 md:col-span-3"
									aria-describedby={`experience-title-${index}`}>
									<WorkExperienceItem
										{...role.data}
										name={role.data.name || extractNameFromFilename(role.id)}
										processedLinkedCompany={role.processedLinkedCompany}
										companyLogoURL={role.companyLogoURL}
										allCompanyLogos={role.allCompanyLogos}
										useShort={true}
									/>
								</div>
							</article>
						</li>
					))
				}
			</ol>

			{
				hasMoreItems && (
					<div class="flex justify-center mt-4">
						<a
							href="/work-experience"
							class="inline-flex items-center px-6 py-3 bg-theme-400 hover:bg-theme-500 text-black font-semibold rounded-lg transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
							See more items
							<svg
								class="w-5 h-5 ml-2"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M17 8l4 4m0 0l-4 4m4-4H3"
								/>
							</svg>
						</a>
					</div>
				)
			}
		</div>
	</div>
</section>
