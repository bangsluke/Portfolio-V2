---
import { Icon } from 'astro-icon/components';
---

<button
	id="themeToggle"
	class="hover:cursor-pointer hover:text-theme-400 hover:scale-150 transition-all">
	<Icon name="sun" class="sun" />
	<Icon name="moon" class="moon" />
</button>

<style>
	#themeToggle {
		border: 0;
		background: none;
	}
	.sun {
		display: block;
	}
	.moon {
		display: none;
	}

	:global(.dark) .sun {
		display: none;
	}
	:global(.dark) .moon {
		display: block;
	}
</style>

<script is:inline>
	// Initialize theme on page load
	function initializeTheme() {
		// Check if theme is already stored in localStorage
		const storedTheme = localStorage.getItem('theme');

		if (storedTheme) {
			// Use stored preference
			if (storedTheme === 'dark') {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		} else {
			// Check system preference
			const prefersDark = window.matchMedia(
				'(prefers-color-scheme: dark)'
			).matches;
			const theme = prefersDark ? 'dark' : 'light';

			// Apply theme
			if (theme === 'dark') {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}

			// Store the detected theme in localStorage
			localStorage.setItem('theme', theme);
		}

		// Trigger a custom event to notify ThemeDisplay component
		window.dispatchEvent(
			new CustomEvent('themeInitialized', {
				detail: { theme: localStorage.getItem('theme') },
			})
		);
	}

	// Run initialization when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initializeTheme);
	} else {
		initializeTheme();
	}

	// Listen for changes in system preferences
	window
		.matchMedia('(prefers-color-scheme: dark)')
		.addEventListener('change', e => {
			// Only update theme if user hasn't set a preference
			if (!localStorage.getItem('theme')) {
				if (e.matches) {
					document.documentElement.classList.add('dark');
					localStorage.setItem('theme', 'dark');
				} else {
					document.documentElement.classList.remove('dark');
					localStorage.setItem('theme', 'light');
				}

				// Trigger event for ThemeDisplay update
				window.dispatchEvent(
					new CustomEvent('themeChanged', {
						detail: { theme: localStorage.getItem('theme') },
					})
				);
			}
		});

	const handleToggleClick = () => {
		const element = document.documentElement;
		element.classList.toggle('dark');

		const isDark = element.classList.contains('dark');
		const theme = isDark ? 'dark' : 'light';

		// Always store user preference when they click the toggle
		localStorage.setItem('theme', theme);
		console.log('Theme toggled to:', theme);

		// Trigger event for ThemeDisplay update
		window.dispatchEvent(
			new CustomEvent('themeChanged', {
				detail: { theme: theme },
			})
		);
	};

	document
		.getElementById('themeToggle')
		.addEventListener('click', handleToggleClick);
</script>
