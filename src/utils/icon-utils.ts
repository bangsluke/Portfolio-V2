// This file is processed at build time to generate the known icons list
// The actual icon list is generated by a build script or Astro's build process

// Fallback list of known icons (will be replaced at build time)
let knownIconsCache: string[] = [
	'CPlusPlus',
	'algolia',
	'angular',
	'apollo',
	'apple_shortcuts',
	'astro',
	'azure',
	'azure_devops',
	'bash',
	'codeium',
	'copilot',
	'css',
	'cursor',
	'cursor-ia',
	'deepseek',
	'dependabot',
	'docker',
	'docusaurus',
	'eslint',
	'excel',
	'figma',
	'firebase',
	'flask',
	'gatsby',
	'git',
	'github',
	'github-svg',
	'gitlab',
	'google_apps_script',
	'google_cloud',
	'google_sheets',
	'google_sites',
	'graphql',
	'heroku',
	'html',
	'instagram',
	'java',
	'javascript',
	'jest',
	'json',
	'markdown',
	'mongo',
	'mysql',
	'neo4j',
	'neo4j_cypher',
	'nestjs',
	'netlify',
	'nextauth',
	'nextjs',
	'node',
	'nodejs',
	'npm',
	'obsidian',
	'openai',
	'php',
	'pip',
	'power_apps',
	'power_automate',
	'power_bi',
	'power_platform',
	'power_query',
	'powerpoint',
	'powershell',
	'preact',
	'prettier',
	'project',
	'python',
	'react',
	'sass',
	'sharepoint',
	'snyk',
	'sql',
	'tailwind',
	'typescript',
	'vba',
	'vercel',
	'visio',
	'vitejs',
	'vs_code',
	'yarn',
	'zod',
];

// Skill name to icon mapping (auto-generated by sync process)
const _skillIconMapping: Record<string, string> = {
	Algolia: 'algolia',
	Apollo: 'apollo',
	'Apple Shortcuts': 'apple_shortcuts',
	Astro: 'astro',
	Azure: 'azure',
	Bash: 'bash',
	Codeium: 'codeium',
	CSS: 'css',
	Cursor: 'cursor',
	Cypher: 'neo4j_cypher',
	Dependabot: 'dependabot',
	DevOps: 'azure_devops',
	Docusaurus: 'docusaurus',
	ESLint: 'eslint',
	Excel: 'excel',
	Figma: 'figma',
	Flask: 'flask',
	Git: 'git',
	GitHub: 'github',
	GitLab: 'gitlab',
	'Google Apps Script': 'google_apps_script',
	'Google Cloud': 'google_cloud',
	'Google Sheets': 'google_sheets',
	'Google Sites': 'google_sites',
	GraphQL: 'graphql',
	Heroku: 'heroku',
	HTML: 'html',
	Java: 'java',
	JavaScript: 'javascript',
	Jest: '---',
	Markdown: 'markdown',
	'Neo4j Aura': 'neo4j_cypher',
	Neo4j: 'neo4j',
	NeoDash: 'neo4j',
	'Nest.JS': 'nestjs',
	Netlify: 'netlify',
	'Next.js': 'nextjs',
	NextAuth: 'nextauth',
	'Node.js': 'nodejs',
	npm: 'npm',
	Obsidian: 'obsidian',
	OpenAI: 'openai',
	pip: 'pip',
	'Power Apps': 'power_apps',
	'Power Automate': 'power_automate',
	'Power BI': 'power_bi',
	'Power Platform': 'power_platform',
	'Power Query': 'power_query',
	PowerPoint: 'powerpoint',
	PowerShell: 'powershell',
	Preact: 'preact',
	Prettier: 'prettier',
	Project: 'project',
	Python: 'python',
	React: 'react',
	SharePoint: 'sharepoint',
	Snyk: 'snyk',
	SQL: 'sql',
	'Tailwind CSS': 'tailwind',
	Typescript: 'typescript',
	VBA: 'vba',
	Visio: 'visio',
	'Vite.js': 'vitejs',
	'VS Code': 'vs_code',
	Yarn: 'yarn',
	Zod: 'zod',
};

/**
 * Gets all known icon names from the public/icons directory
 * @returns Array of icon names (without .svg extension)
 */
export function getKnownIcons(): string[] {
	return knownIconsCache;
}

/**
 * Checks if an icon name is known (exists in the icons directory)
 * @param iconName - The icon name to check (with or without .svg extension)
 * @returns boolean indicating if the icon is known
 */
export function isKnownIcon(iconName: string): boolean {
	if (!iconName) return false;

	// Remove .svg extension if present
	const cleanIconName = iconName.replace(/\.svg$/, '');

	return knownIconsCache.includes(cleanIconName);
}

/**
 * Gets the clean icon name (removes .svg extension)
 * @param logoFileName - The logo file name from frontmatter
 * @returns Clean icon name or null if no logo file name provided
 */
export function getSkillIconName(logoFileName: string | null): string | null {
	if (!logoFileName) return null;
	// Remove .svg extension if present
	return logoFileName.replace(/\.svg$/, '');
}

/**
 * Gets the icon name for a skill by looking up the skill name in the mapping
 * @param skillName - The skill name to look up
 * @returns Icon name or null if not found
 * @deprecated This function is no longer used. Skills are now looked up directly from the skills collection.
 */
export function getSkillIconByName(skillName: string): string | null {
	if (!skillName) return null;
	// This function is deprecated - skills are now looked up directly from the skills collection
	// in the SkillPill component for better error handling and real-time updates
	return null;
}

/**
 * Checks if an icon should be shown (exists and is known)
 * @param iconName - The icon name to check
 * @returns boolean indicating if the icon should be shown
 */
export function shouldShowIcon(iconName: string): boolean {
	return isKnownIcon(iconName);
}

// Build-time function to update the icons list
// This would be called by a build script or Astro plugin
export function updateKnownIcons(icons: string[]) {
	knownIconsCache = icons;
}
