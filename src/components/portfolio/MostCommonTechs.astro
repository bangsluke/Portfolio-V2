---
import { getCollection } from 'astro:content';
import SkillPill from '../ui/SkillPill.astro';

// Get all projects and skills
const projects = await getCollection('projects');
const skills = await getCollection('skills');

// Create a set of skill names that have "hosting" or "security" tags
const excludedSkillNames = new Set<string>();

skills.forEach(skill => {
	if (
		skill.data.tags &&
		(skill.data.tags.includes('hosting') ||
			skill.data.tags.includes('security'))
	) {
		// Add the skill name to the excluded set
		const skillName = skill.data.name || skill.slug;
		excludedSkillNames.add(skillName.toLowerCase()); // Store in lowercase for case-insensitive comparison
	}
});

// Count technology usage across all projects, excluding hosting/security skills
const techCount: Record<string, number> = {};

projects.forEach(project => {
	if (project.data.technologies) {
		project.data.technologies.forEach((tech: string) => {
			// Clean the technology name by removing Obsidian brackets
			const cleanTech = tech.replace(/\[\[|\]\]/g, '');

			// Skip if this technology corresponds to a hosting or security skill (case-insensitive)
			if (excludedSkillNames.has(cleanTech.toLowerCase())) {
				return;
			}

			// Increment count for this technology
			techCount[cleanTech] = (techCount[cleanTech] || 0) + 1;
		});
	}
});

// Sort technologies by usage count (descending) and get top 10
const topTechs = Object.entries(techCount)
	.sort(([, a], [, b]) => b - a) // Sort by count descending
	.slice(0, 10) // Get top 10
	.map(([tech, count]) => ({ tech, count }));

type TechVariant = 'default' | 'center';

// Base classes that are common to all variants
const baseClasses = 'flex flex-wrap gap-4 max-lg:gap-1 grid-auto-efe';

// Variant-specific classes
const variantClasses: Record<TechVariant, string> = {
	default: 'cursor-default',
	center: 'justify-center cursor-default',
};

const { variant = 'default', size = 'md' } = Astro.props;

// Combine base classes with variant-specific classes
const classes = `${baseClasses} ${variantClasses[variant as TechVariant]}`;
---

<div class={classes}>
	{
		topTechs.map(({ tech, count }, index) => (
			<div class="relative group/tech">
				<SkillPill
					skillName={tech}
					variant="default"
					size={size === 'xs' ? 'xs' : 'md'}
				/>
				{/* Tooltip showing usage count - positioned above or below based on row */}
				<div
					class={`absolute left-1/2 transform -translate-x-1/2 opacity-0 group-hover/tech:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap z-10 ${
						index < 5 ? 'top-full mt-2' : 'bottom-full mb-2'
					}`}>
					<div class="global-tooltip">
						<div class="global-tooltip-content">
							Used in {count} project{count > 1 ? 's' : ''}
						</div>
						<div
							class={`absolute left-1/2 transform -translate-x-1/2 global-tooltip-arrow ${
								index < 5
									? 'global-tooltip-arrow-top'
									: 'global-tooltip-arrow-bottom'
							}`}
						/>
					</div>
				</div>
			</div>
		))
	}
</div>
