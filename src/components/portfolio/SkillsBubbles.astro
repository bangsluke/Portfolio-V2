---
import { getCollection } from 'astro:content';
import { processContent } from '../../utils/content-processor';
import SkillsBubbleChart from './SkillsBubbleChart';
import { extractNameFromFilename } from '../../utils/filename-utils';

// Get all skills and projects from the local content folders
const skills = await getCollection('skills');
const projects = await getCollection('projects');

// Process skills to include processed descriptions
const processedSkills = skills.map(skill => ({
	...skill,
	data: {
		...skill.data,
		skillDescription: processContent(skill.data.skillDescription || ''),
	},
}));

// Get the class attribute from the parent component
const { class: className } = Astro.props;
---

<section class={`w-full h-full ${className || ''}`}>
	<SkillsBubbleChart
		client:only="preact"
		skills={processedSkills}
		projects={projects}
	/>
</section>

<script>
	// Fullscreen modal functionality
	document.addEventListener('DOMContentLoaded', () => {
		const fullscreenBtn = document.getElementById('fullscreen-skills-btn');
		const modal = document.getElementById('skills-fullscreen-modal');
		const closeBtn = document.getElementById('close-skills-modal');
		const modalOverlay = document.getElementById('skills-modal-overlay');
		const modalResetBtn = document.getElementById('modal-skills-reset-btn');
		const modalToggleBtn = document.getElementById('modal-skills-toggle-btn');
		let sizeByRating = true;

		if (fullscreenBtn) {
			fullscreenBtn.addEventListener('click', () => {
				if (modal) {
					modal.classList.remove('hidden');
					document.body.style.overflow = 'hidden';

					// Automatically trigger reset functionality to center everything
					setTimeout(() => {
						if (modalResetBtn) {
							modalResetBtn.click();
						}
					}, 100); // Small delay to ensure modal is fully rendered
				}
			});
		}

		const closeModal = () => {
			if (modal) {
				modal.classList.add('hidden');
				document.body.style.overflow = 'auto';
			}
		};

		if (closeBtn) {
			closeBtn.addEventListener('click', closeModal);
		}

		if (modalOverlay) {
			modalOverlay.addEventListener('click', closeModal);
		}

		// Close on escape key
		document.addEventListener('keydown', e => {
			if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
				closeModal();
			}
		});

		// Modal Reset button functionality
		if (modalResetBtn) {
			modalResetBtn.addEventListener('click', () => {
				// Reset toggle to skill rating (first state)
				sizeByRating = true;
				if (modalToggleBtn) {
					modalToggleBtn.textContent = 'Toggle: Bubbles (Skill Rating)';
					modalToggleBtn.title =
						'Toggle between bubble chart (sized by skill rating or by project count), and list view';
				}

				// Show bubbles view, hide table
				const modalBubblesView = document.getElementById(
					'modal-skills-bubbles-view'
				);
				const modalTableView = document.getElementById(
					'modal-skills-table-view'
				);
				if (modalBubblesView) modalBubblesView.classList.remove('hidden');
				if (modalTableView) modalTableView.classList.add('hidden');

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsReset', {
						detail: { currentView: 'bubbles-skill' },
					})
				);
			});
		}

		// Modal Toggle button functionality
		if (modalToggleBtn) {
			modalToggleBtn.addEventListener('click', () => {
				if (sizeByRating) {
					// Switch to project count sizing
					sizeByRating = false;
					modalToggleBtn.textContent = 'Toggle: Bubbles (Project)';
					modalToggleBtn.title =
						'Toggle between bubble chart (project count) and list view';

					// Show bubbles view, hide table
					const modalBubblesView = document.getElementById(
						'modal-skills-bubbles-view'
					);
					const modalTableView = document.getElementById(
						'modal-skills-table-view'
					);
					if (modalBubblesView) modalBubblesView.classList.remove('hidden');
					if (modalTableView) modalTableView.classList.add('hidden');

					// Dispatch event for the Preact component
					window.dispatchEvent(
						new CustomEvent('skillsViewToggle', {
							detail: { currentView: 'bubbles-project' },
						})
					);
				} else if (modalToggleBtn.textContent === 'Toggle: Bubbles (Project)') {
					// Switch to list view
					modalToggleBtn.textContent = 'Toggle: List';
					modalToggleBtn.title = 'Show list view of all skills';

					// Hide bubbles, show table
					const modalBubblesView = document.getElementById(
						'modal-skills-bubbles-view'
					);
					const modalTableView = document.getElementById(
						'modal-skills-table-view'
					);
					if (modalBubblesView) modalBubblesView.classList.add('hidden');
					if (modalTableView) modalTableView.classList.remove('hidden');

					// Dispatch event for the Preact component
					window.dispatchEvent(
						new CustomEvent('skillsViewToggle', {
							detail: { currentView: 'list' },
						})
					);
				} else {
					// Switch back to skill rating (first state)
					sizeByRating = true;
					modalToggleBtn.textContent = 'Toggle: Bubbles (Skill)';
					modalToggleBtn.title =
						'Toggle between bubble chart (skill rating), bubble chart (project count), and list view';

					// Show bubbles view, hide table
					const modalBubblesView = document.getElementById(
						'modal-skills-bubbles-view'
					);
					const modalTableView = document.getElementById(
						'modal-skills-table-view'
					);
					if (modalBubblesView) modalBubblesView.classList.remove('hidden');
					if (modalTableView) modalTableView.classList.add('hidden');

					// Dispatch event for the Preact component
					window.dispatchEvent(
						new CustomEvent('skillsViewToggle', {
							detail: { currentView: 'bubbles-skill' },
						})
					);
				}
			});
		}
	});
</script>

<!-- Fullscreen Modal -->
<div id="skills-fullscreen-modal" class="fixed inset-0 z-50 hidden">
	<div
		id="skills-modal-overlay"
		class="absolute inset-0 bg-black bg-opacity-75">
	</div>
	<div
		class="relative z-10 w-full h-full flex items-center justify-center p-4 pt-20">
		<div
			class="bg-white dark:bg-gray-900 rounded-xl shadow-2xl w-full h-full max-w-7xl max-h-[95vh] overflow-hidden">
			<div class="p-6 h-full flex flex-col">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
						Skills Bubble Chart
					</h3>
					<div class="flex items-center gap-4">
						<!-- Modal Reset Button -->
						<button
							id="modal-skills-reset-btn"
							class="global-element global-button global-clear-button"
							title="Reset to default view - center graph and reset to skill rating sizing">
							Reset
						</button>

						<!-- Modal Toggle Button -->
						<button
							id="modal-skills-toggle-btn"
							class="global-element global-button"
							title="Toggle between bubble chart (sized by skill rating or by project count), and list view">
							Toggle: Bubbles (Skill)
						</button>

						<button
							id="close-skills-modal"
							class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
							aria-label="Close fullscreen view"
							title="Close fullscreen view">
							<svg
								class="w-4 h-4"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
				<div class="flex-1 overflow-hidden">
					<!-- Modal Skills Bubbles View -->
					<div id="modal-skills-bubbles-view">
						<SkillsBubbleChart
							client:only="preact"
							skills={processedSkills}
							projects={projects}
							isFullscreen={true}
						/>
					</div>

					<!-- Modal Skills Table View -->
					<div id="modal-skills-table-view" class="hidden">
						<div class="overflow-y-auto h-full">
							<!-- Mobile: Card layout -->
							<div class="block md:hidden space-y-3">
								{
									processedSkills
										.sort(
											(a, b) =>
												(b.data.skillRating || 0) - (a.data.skillRating || 0)
										)
										.map(skill => (
											<div class="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3 border border-gray-200 dark:border-gray-700">
												<!-- Top row: Name with logo, Rating, Project Count -->
												<div class="flex items-start justify-between gap-3 mb-2">
													<div class="flex flex-col items-start gap-1 min-w-0 flex-1">
														<div class="text-xs font-medium text-colour">
															{extractNameFromFilename(skill.id || skill.slug)}
														</div>
														{skill.data.logoFileName && (
															<img
																src={`/icons/${skill.data.logoFileName}`}
																alt={`${skill.data.name || skill.slug} icon`}
																class="w-5 h-5"
															/>
														)}
													</div>
													<div class="flex gap-3 text-xs text-colour">
														<div class="text-center">
															<div class="text-gray-500 dark:text-gray-400">Rating</div>
															<div class="font-medium">
																{skill.data.skillRating || '-'}
															</div>
														</div>
														<div class="text-center">
															<div class="text-gray-500 dark:text-gray-400">Projects</div>
															<div class="font-medium">
																{(() => {
																	const skillName = skill.data.name || skill.slug;
																	return projects.filter(project =>
																		project.data.technologies?.some(
																			(tech: string) => {
																				const cleanTech = tech.replace(/\[\[|\]\]/g, '');
																				return cleanTech.toLowerCase() === skillName.toLowerCase();
																			}
																		)
																	).length;
																})()}
															</div>
														</div>
													</div>
												</div>
												<!-- Bottom row: Description -->
												{skill.data.skillDescription && skill.data.skillDescription !== '-' && (
													<div class="text-xs text-colour opacity-80 mt-2 pt-2 border-t border-gray-200 dark:border-gray-600">
														{skill.data.skillDescription}
													</div>
												)}
											</div>
										))
								}
							</div>

							<!-- Desktop: Table layout -->
							<div class="hidden md:block overflow-x-auto">
								<table class="w-full text-xs text-colour">
									<thead class="sticky top-0 bg-white dark:bg-gray-900">
										<tr class="border-b border-gray-300 dark:border-gray-600">
											<th class="text-left text-colour py-2 px-3 font-semibold">Name</th>
											<th class="text-left text-colour py-2 px-3 font-semibold">Skill Rating</th>
											<th class="text-left text-colour py-2 px-3 font-semibold">Project Count</th>
											<th class="text-left text-colour py-2 px-3 font-semibold">Description</th>
										</tr>
									</thead>
									<tbody>
										{
											processedSkills
												.sort(
													(a, b) =>
														(b.data.skillRating || 0) - (a.data.skillRating || 0)
												)
												.map(skill => (
													<tr class="border-b border-gray-200 dark:border-gray-700">
														<td class="py-2 px-3 font-medium text-colour">
															<div class="flex flex-col items-start gap-1">
																<div class="text-xs font-medium">
																	{extractNameFromFilename(skill.id || skill.slug)}
																</div>
																{skill.data.logoFileName && (
																	<img
																		src={`/icons/${skill.data.logoFileName}`}
																		alt={`${skill.data.name || skill.slug} icon`}
																		class="w-5 h-5"
																	/>
																)}
															</div>
														</td>
														<td class="py-2 px-3" style="color: var(--color-text-colour);">
															{skill.data.skillRating ? skill.data.skillRating : '-'}
														</td>
														<td class="py-2 px-3" style="color: var(--color-text-colour);">
															{(() => {
																const skillName = skill.data.name || skill.slug;
																return projects.filter(project =>
																	project.data.technologies?.some(
																		(tech: string) => {
																			const cleanTech = tech.replace(/\[\[|\]\]/g, '');
																			return cleanTech.toLowerCase() === skillName.toLowerCase();
																		}
																	)
																).length;
															})()}
														</td>
														<td class="py-2 px-3" style="color: var(--color-text-colour);">
															{skill.data.skillDescription ? skill.data.skillDescription : '-'}
														</td>
													</tr>
												))
										}
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
