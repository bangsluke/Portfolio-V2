---
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import Heading from '../ui/Heading.astro';
import ReferenceItem from './ReferenceItem.astro';

// Get all references, companies, and clients from the local content folders
const references = await getCollection('references');
const companies = await getCollection('companies');
const clients = await getCollection('clients');

// Sort references alphabetically by name
const sortedReferences = references.sort((a, b) => {
	// Sort alphabetically by slug (filename)
	return a.slug.localeCompare(b.slug);
});

// Process references to include company/client logos
const processedReferences = sortedReferences.map(reference => {
	let companyLogoURL = null;

	// If reference has linkedCompany, find the company or client and get its logoURL
	if (reference.data.linkedCompany && reference.data.linkedCompany.length > 0) {
		// Get the first linked company and strip Obsidian link format
		const linkedCompanyRaw = reference.data.linkedCompany[0];
		const linkedCompanyName = linkedCompanyRaw.replace(/\[\[|\]\]/g, ''); // Remove [[ and ]]

		// First try to find in companies collection
		const company = companies.find(company => {
			const companyName = company.id.replace('.md', ''); // Remove .md extension
			return companyName === linkedCompanyName;
		});

		if (company && company.data.logoURL) {
			companyLogoURL = company.data.logoURL;
		} else {
			// If not found in companies, try clients collection
			const client = clients.find(client => {
				const clientName = client.id.replace('.md', ''); // Remove .md extension
				return clientName === linkedCompanyName;
			});

			if (client && client.data.logoURL) {
				companyLogoURL = client.data.logoURL;
			}
		}
	}

	return {
		...reference,
		companyLogoURL,
	};
});
---

<section class="py-8 px-8 max-md:py-4 mb-4 scroll-m-16" id="references">
	<div class="flex flex-col pt-8 max-w-4xl mx-auto">
		<div class="flex gap-4 items-center justify-center">
			<Icon class="text-3xl dark:text-white text-blacktext" name="sun" />
			<Heading text="" textGradient="References" level={2} />
		</div>

		<div class="relative max-md:mt-0 mt-8" aria-label="References">
			<ol class="relative mt-10">
				{
					processedReferences.map((reference, index) => (
						<li>
							<article
								role="article"
								aria-labelledby={`reference-title-${index}`}>
								<div
									class="flex flex-col gap-2 text-zinc-00 dark:text-zinc-300 md:col-span-3"
									aria-describedby={`reference-title-${index}`}>
									<ReferenceItem
										{...reference.data}
										name={
											reference.data.name ||
											reference.slug
												.replace(/-/g, ' ')
												.replace(/\b\w/g, l => l.toUpperCase())
										}
										companyLogoURL={reference.companyLogoURL}
									/>
								</div>
							</article>
						</li>
					))
				}
			</ol>
		</div>
	</div>
</section>
