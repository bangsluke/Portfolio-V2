---
import { getCollection } from 'astro:content';
import { processContent } from '../../utils/content-processor';
import SkillsBubbleChart from './SkillsBubbleChart';
import { SKILLS_FILTER_OPTIONS } from '../../../scripts/repoConfig.js';

// Get all skills and projects from the local content folders
const skills = await getCollection('skills');
const projects = await getCollection('projects');

// Process skills to include processed descriptions
const processedSkills = skills.map(skill => ({
	...skill,
	data: {
		...skill.data,
		skillDescription: processContent(skill.data.skillDescription || ''),
	},
}));

// Filter options based on existing skill tags
const existingTags = new Set();
skills.forEach(skill => {
	skill.data.tags?.forEach(tag => existingTags.add(tag));
});

const filteredOptions = SKILLS_FILTER_OPTIONS.filter(
	option => option === 'all' || existingTags.has(option)
).map(option => ({
	value: option,
	label:
		option === 'all'
			? 'All Skills'
			: option.charAt(0).toUpperCase() + option.slice(1),
}));
---

<section class="w-full h-full">
	<SkillsBubbleChart
		client:only="preact"
		skills={processedSkills}
		projects={projects}
		filterOptions={filteredOptions}
	/>
</section>

<script>
	// Fullscreen modal functionality
	document.addEventListener('DOMContentLoaded', () => {
		const fullscreenBtn = document.getElementById('fullscreen-skills-btn');
		const modal = document.getElementById('skills-fullscreen-modal');
		const closeBtn = document.getElementById('close-skills-modal');
		const modalOverlay = document.getElementById('skills-modal-overlay');
		const modalFilterBtn = document.getElementById('modal-skills-filter-btn');
		const modalDropdown = document.getElementById(
			'modal-skills-filter-dropdown'
		);
		const modalFilterText = document.getElementById('modal-skills-filter-text');
		const modalCheckboxes = document.querySelectorAll(
			'.modal-skills-filter-checkbox'
		);
		const modalResetBtn = document.getElementById('modal-skills-reset-btn');
		const modalToggleBtn = document.getElementById('modal-skills-toggle-btn');
		let selectedFilters = ['all'];
		let sizeByRating = true;

		if (fullscreenBtn) {
			fullscreenBtn.addEventListener('click', () => {
				if (modal) {
					modal.classList.remove('hidden');
					document.body.style.overflow = 'hidden';
				}
			});
		}

		const closeModal = () => {
			if (modal) {
				modal.classList.add('hidden');
				document.body.style.overflow = 'auto';
			}
		};

		if (closeBtn) {
			closeBtn.addEventListener('click', closeModal);
		}

		if (modalOverlay) {
			modalOverlay.addEventListener('click', closeModal);
		}

		// Close on escape key
		document.addEventListener('keydown', e => {
			if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
				closeModal();
			}
		});

		// Modal filter functionality
		if (modalFilterBtn && modalDropdown) {
			modalFilterBtn.addEventListener('click', e => {
				e.stopPropagation();
				modalDropdown.classList.toggle('hidden');
			});
		}

		// Close modal dropdown when clicking outside
		document.addEventListener('click', () => {
			if (modalDropdown) {
				modalDropdown.classList.add('hidden');
			}
		});

		// Handle modal checkbox changes
		modalCheckboxes.forEach(checkbox => {
			checkbox.addEventListener('change', e => {
				const target = e.target as HTMLInputElement;
				const value = target.value;

				if (value === 'all') {
					// If "All Skills" is selected, unselect others
					if (target.checked) {
						modalCheckboxes.forEach(cb => {
							if (cb !== target) {
								(cb as HTMLInputElement).checked = false;
							}
						});
						selectedFilters = ['all'];
					} else {
						// If "All Skills" is unchecked, select the first other option
						const firstOtherCheckbox = Array.from(modalCheckboxes).find(
							cb => (cb as HTMLInputElement).value !== 'all'
						) as HTMLInputElement;
						if (firstOtherCheckbox) {
							firstOtherCheckbox.checked = true;
							selectedFilters = [firstOtherCheckbox.value];
						}
					}
				} else {
					// If other option is selected, unselect "All Skills"
					const allCheckbox = Array.from(modalCheckboxes).find(
						cb => (cb as HTMLInputElement).value === 'all'
					) as HTMLInputElement;
					if (allCheckbox) {
						allCheckbox.checked = false;
					}

					if (target.checked) {
						selectedFilters.push(value);
					} else {
						selectedFilters = selectedFilters.filter(f => f !== value);
					}

					// If no filters selected, select "All Skills"
					if (selectedFilters.length === 0) {
						allCheckbox.checked = true;
						selectedFilters = ['all'];
					}
				}

				// Update display text
				if (modalFilterText) {
					if (selectedFilters.includes('all') || selectedFilters.length === 0) {
						modalFilterText.textContent = 'All Skills';
					} else if (selectedFilters.length === 1) {
						const filter = selectedFilters[0];
						modalFilterText.textContent =
							filter.charAt(0).toUpperCase() + filter.slice(1);
					} else {
						modalFilterText.textContent = `${selectedFilters.length} Filters`;
					}
				}

				// Dispatch custom event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsFilterChange', {
						detail: { filters: selectedFilters },
					})
				);
			});
		});

		// Modal Reset button functionality
		if (modalResetBtn) {
			modalResetBtn.addEventListener('click', () => {
				// Reset filters to 'all'
				selectedFilters = ['all'];
				modalCheckboxes.forEach(checkbox => {
					const target = checkbox as HTMLInputElement;
					target.checked = target.value === 'all';
				});

				// Reset toggle to skill rating
				sizeByRating = true;
				if (modalToggleBtn) {
					modalToggleBtn.textContent = 'Toggle: Skill Rating';
					modalToggleBtn.title =
						'Skill bubbles sized based on my self assessed skill rating';
				}

				// Update modal filter text
				if (modalFilterText) {
					modalFilterText.textContent = 'All Skills';
				}

				// Dispatch events for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsFilterChange', {
						detail: { filters: selectedFilters },
					})
				);
				window.dispatchEvent(
					new CustomEvent('skillsReset', {
						detail: { sizeByRating },
					})
				);
			});
		}

		// Modal Toggle button functionality
		if (modalToggleBtn) {
			modalToggleBtn.addEventListener('click', () => {
				sizeByRating = !sizeByRating;

				if (sizeByRating) {
					modalToggleBtn.textContent = 'Toggle: Skill Rating';
					modalToggleBtn.title =
						'Skill bubbles sized based on my self assessed skill rating';
				} else {
					modalToggleBtn.textContent = 'Toggle: Project Count';
					modalToggleBtn.title =
						'Skill bubbles sized based on the number of projects used on';
				}

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsToggle', {
						detail: { sizeByRating },
					})
				);
			});
		}

		// Listen for filter changes from main component
		window.addEventListener('skillsFilterChange', (e: any) => {
			const { filters } = e.detail;
			selectedFilters = filters;

			// Update modal checkboxes to match main filter
			modalCheckboxes.forEach(checkbox => {
				const target = checkbox as HTMLInputElement;
				target.checked = selectedFilters.includes(target.value);
			});

			// Update modal filter text
			if (modalFilterText) {
				if (selectedFilters.includes('all') || selectedFilters.length === 0) {
					modalFilterText.textContent = 'All Skills';
				} else if (selectedFilters.length === 1) {
					const filter = selectedFilters[0];
					modalFilterText.textContent =
						filter.charAt(0).toUpperCase() + filter.slice(1);
				} else {
					modalFilterText.textContent = `${selectedFilters.length} Filters`;
				}
			}
		});
	});
</script>

<!-- Fullscreen Modal -->
<div id="skills-fullscreen-modal" class="fixed inset-0 z-50 hidden">
	<div
		id="skills-modal-overlay"
		class="absolute inset-0 bg-black bg-opacity-75">
	</div>
	<div class="relative z-10 w-full h-full flex items-center justify-center p-4">
		<div
			class="bg-white dark:bg-gray-900 rounded-xl shadow-2xl w-full h-full max-w-7xl max-h-[95vh] overflow-hidden">
			<div class="p-6 h-full flex flex-col">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
						Skills Bubble Chart
					</h3>
					<div class="flex items-center gap-4">
						<!-- Modal Reset Button -->
						<button
							id="modal-skills-reset-btn"
							class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 text-sm font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors shadow-sm"
							title="Reset to default view - clear filters, reset to skill rating, and center graph">
							Reset
						</button>

						<!-- Modal Toggle Button -->
						<button
							id="modal-skills-toggle-btn"
							class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 text-sm font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors shadow-sm"
							title="Toggle between skill rating and project count sizing">
							Toggle: Skill Rating
						</button>

						<!-- Modal Multi-select dropdown -->
						<div class="relative">
							<button
								id="modal-skills-filter-btn"
								class="global-form-element bg-transparent px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-theme-400 focus:border-transparent flex items-center gap-2 min-w-[120px]">
								<span id="modal-skills-filter-text">All Skills</span>
								<svg
									class="w-4 h-4"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24">
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M19 9l-7 7-7-7"></path>
								</svg>
							</button>
							<div
								id="modal-skills-filter-dropdown"
								class="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg z-50 hidden max-h-60 overflow-y-auto">
								{
									filteredOptions.map(option => (
										<label class="flex items-center px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer">
											<input
												type="checkbox"
												value={option.value}
												class="modal-skills-filter-checkbox mr-2 rounded border-gray-300 dark:border-gray-600 text-theme-400 focus:ring-theme-400"
												checked={option.value === 'all'}
											/>
											<span class="text-sm text-gray-900 dark:text-gray-100">
												{option.label}
											</span>
										</label>
									))
								}
							</div>
						</div>
						<button
							id="close-skills-modal"
							class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
							aria-label="Close fullscreen view">
							<svg
								class="w-6 h-6"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
				<div class="flex-1 overflow-hidden">
					<SkillsBubbleChart
						client:only="preact"
						skills={processedSkills}
						projects={projects}
						filterOptions={filteredOptions}
						isFullscreen={true}
					/>
				</div>
			</div>
		</div>
	</div>
</div>
