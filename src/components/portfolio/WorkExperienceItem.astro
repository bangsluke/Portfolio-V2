---
import { processContent } from '../../utils/content-processor';

interface Props {
	name: string;
	tags?: string[];
	dateStart?: string | Date | null;
	dateEnd?: string | Date | null;
	logoURL?: string | null;
	linkedCompany?: string[];
	roleDescription?: string;
	keyAchievement?: string;
	processedLinkedCompany?: string;
	companyLogoURL?: string | null;
	allCompanyLogos?: { logoURL: string | null; name: string }[];
}

const {
	name,
	tags,
	dateStart,
	dateEnd,
	logoURL,
	linkedCompany,
	roleDescription,
	keyAchievement,
	processedLinkedCompany,
	companyLogoURL,
	allCompanyLogos,
} = Astro.props;

// Process content to handle Obsidian links and markdown
const processedRoleDescription = processContent(roleDescription);
const processedKeyAchievement = processContent(keyAchievement);

// Format dates in "MMM YYYY - MMM YYYY" format
function formatDate(date: string | Date | null | undefined): string {
	if (!date) return '';

	const dateObj = typeof date === 'string' ? new Date(date) : date;
	if (isNaN(dateObj.getTime())) return '';

	return dateObj.toLocaleDateString('en-US', {
		month: 'short',
		year: 'numeric',
	});
}

const formattedDateStart = formatDate(dateStart);
const formattedDateEnd = formatDate(dateEnd);

// Handle date range formatting
let dateRange = '';
if (formattedDateStart && formattedDateEnd) {
	dateRange = `${formattedDateStart} - ${formattedDateEnd}`;
} else if (formattedDateStart && !dateEnd) {
	dateRange = `${formattedDateStart} - Present`;
} else if (formattedDateStart) {
	dateRange = formattedDateStart;
} else if (formattedDateEnd) {
	dateRange = formattedDateEnd;
}
---

<div
	class="relative mx-12 pb-12 grid md:grid-cols-5 md:gap-10 before:absolute before:left-[-35px] before:block before:h-full before:border-l-2 before:border-black/20 dark:before:border-white/15 before:content-['']">
	<div class="pb-12 md:col-span-2">
		<div class="sticky top-0">
			<span
				class="absolute -left-[42px] text-5xl text-theme-400 rounded-full drop-shadow-[0px_0px_8px_rgba(0,255,94,1)]"
				>&bull;</span
			>
			<h3 class="text-xl font-bold text-theme-400">
				{name}
			</h3>
			<h4 class="text-xl font-semibold text-zinc-600 dark:text-white">
				{processedLinkedCompany}
			</h4>
			<time
				datetime={dateStart?.toString()}
				class="text-sm text-zinc-600/80 dark:text-white/80">
				{dateRange}
			</time>

			{/* Company logos card */}
			{
				allCompanyLogos && allCompanyLogos.length > 0 && (
					<div class="mt-3 flex flex-wrap gap-3">
						{allCompanyLogos.map(company => {
							console.log(
								`Rendering company logo for: ${company.name}, logoURL: ${company.logoURL}`
							);
							return company.logoURL ? (
								<img
									src={company.logoURL}
									alt={`${company.name} logo`}
									title={company.name}
									class="w-24 h-24 object-contain hover:scale-110 transition-transform duration-200"
								/>
							) : null;
						})}
					</div>
				)
			}
		</div>
	</div>
	<div
		class="flex flex-col gap-2 pb-4 text-zinc-00 dark:text-zinc-300 md:col-span-3">
		<div class="processed-content" set:html={processedRoleDescription} />
		{
			processedKeyAchievement && (
				<div class="mt-2">
					<strong>Key Achievement:</strong>
					<div class="processed-content" set:html={processedKeyAchievement} />
				</div>
			)
		}
	</div>
</div>
