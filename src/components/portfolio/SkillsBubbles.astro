---
import { getCollection } from 'astro:content';
import { processContent } from '../../utils/content-processor';
import SkillsBubbleChart from './SkillsBubbleChart';

// Get all skills and projects from the local content folders
const skills = await getCollection('skills');
const projects = await getCollection('projects');

// Process skills to include processed descriptions
const processedSkills = skills.map(skill => ({
	...skill,
	data: {
		...skill.data,
		skillDescription: processContent(skill.data.skillDescription || ''),
	},
}));

// Transform projects to match the expected interface
const transformedProjects = projects.map(project => ({
	id: project.id,
	data: { skills: project.data.tags || [] },
}));
---

<section class="w-full h-full">
	<SkillsBubbleChart
		client:only="preact"
		skills={processedSkills}
		projects={transformedProjects}
	/>
</section>

<script>
	// Fullscreen modal functionality
	document.addEventListener('DOMContentLoaded', () => {
		const fullscreenBtn = document.getElementById('fullscreen-skills-btn');
		const modal = document.getElementById('skills-fullscreen-modal');
		const closeBtn = document.getElementById('close-skills-modal');
		const modalOverlay = document.getElementById('skills-modal-overlay');
		const modalResetBtn = document.getElementById('modal-skills-reset-btn');
		const modalToggleBtn = document.getElementById('modal-skills-toggle-btn');
		let sizeByRating = true;

		if (fullscreenBtn) {
			fullscreenBtn.addEventListener('click', () => {
				if (modal) {
					modal.classList.remove('hidden');
					document.body.style.overflow = 'hidden';

					// Automatically trigger reset functionality to center everything
					setTimeout(() => {
						if (modalResetBtn) {
							modalResetBtn.click();
						}
					}, 100); // Small delay to ensure modal is fully rendered
				}
			});
		}

		const closeModal = () => {
			if (modal) {
				modal.classList.add('hidden');
				document.body.style.overflow = 'auto';
			}
		};

		if (closeBtn) {
			closeBtn.addEventListener('click', closeModal);
		}

		if (modalOverlay) {
			modalOverlay.addEventListener('click', closeModal);
		}

		// Close on escape key
		document.addEventListener('keydown', e => {
			if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
				closeModal();
			}
		});

		// Modal Reset button functionality
		if (modalResetBtn) {
			modalResetBtn.addEventListener('click', () => {
				// Reset toggle to skill rating
				sizeByRating = true;
				if (modalToggleBtn) {
					modalToggleBtn.textContent = 'Toggle: Skill Rating';
					modalToggleBtn.title =
						'Skill bubbles sized based on my self assessed skill rating';
				}

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsReset', {
						detail: { sizeByRating },
					})
				);
			});
		}

		// Modal Toggle button functionality
		if (modalToggleBtn) {
			modalToggleBtn.addEventListener('click', () => {
				sizeByRating = !sizeByRating;

				if (sizeByRating) {
					modalToggleBtn.textContent = 'Toggle: Skill Rating';
					modalToggleBtn.title =
						'Skill bubbles sized based on my self assessed skill rating';
				} else {
					modalToggleBtn.textContent = 'Toggle: Project Count';
					modalToggleBtn.title =
						'Skill bubbles sized based on the number of projects used on';
				}

				// Dispatch event for the Preact component
				window.dispatchEvent(
					new CustomEvent('skillsToggle', {
						detail: { sizeByRating },
					})
				);
			});
		}
	});
</script>

<!-- Fullscreen Modal -->
<div id="skills-fullscreen-modal" class="fixed inset-0 z-50 hidden">
	<div
		id="skills-modal-overlay"
		class="absolute inset-0 bg-black bg-opacity-75">
	</div>
	<div
		class="relative z-10 w-full h-full flex items-center justify-center p-4 pt-20">
		<div
			class="bg-white dark:bg-gray-900 rounded-xl shadow-2xl w-full h-full max-w-7xl max-h-[95vh] overflow-hidden">
			<div class="p-6 h-full flex flex-col">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
						Skills Bubble Chart
					</h3>
					<div class="flex items-center gap-4">
						<!-- Modal Reset Button -->
						<button
							id="modal-skills-reset-btn"
							class="global-element global-button global-clear-button"
							title="Reset to default view - center graph and reset to skill rating sizing">
							Reset
						</button>

						<!-- Modal Toggle Button -->
						<button
							id="modal-skills-toggle-btn"
							class="global-element global-button"
							title="Toggle between skill rating and project count sizing">
							Toggle: Skill Rating
						</button>

						<button
							id="close-skills-modal"
							class="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
							aria-label="Close fullscreen view"
							title="Close fullscreen view">
							<svg
								class="w-6 h-6"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
				<div class="flex-1 overflow-hidden">
					<SkillsBubbleChart
						client:only="preact"
						skills={processedSkills}
						projects={transformedProjects}
						isFullscreen={true}
					/>
				</div>
			</div>
		</div>
	</div>
</div>
