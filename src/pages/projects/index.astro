---
import Layout from '../../layouts/Layout.astro';
import ProjectCard from '../../components/portfolio/ProjectCard.astro';
import Heading from '../../components/ui/Heading.astro';
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import { processObsidianLink } from '../../utils/content-processor';
import { extractNameFromFilename } from '../../utils/filename-utils';

// Get all projects, companies, and clients
const projects = await getCollection('projects');
const companies = await getCollection('companies');
const clients = await getCollection('clients');

// Sort projects by portfolioOrder first, then dateStart, then alphabetically
const sortedProjects = projects.sort((a, b) => {
	// Get portfolioOrder values (default to 999 if not set)
	const orderA = a.data.portfolioOrder || 999;
	const orderB = b.data.portfolioOrder || 999;

	// First, sort by portfolioOrder (numerically)
	if (orderA !== orderB) {
		return orderA - orderB;
	}

	// If portfolioOrder is the same, sort by dateStart (chronologically)
	const dateA = a.data.dateStart || new Date(0);
	const dateB = b.data.dateStart || new Date(0);

	const dateAValue =
		dateA instanceof Date ? dateA.getTime() : new Date(dateA).getTime();
	const dateBValue =
		dateB instanceof Date ? dateB.getTime() : new Date(dateB).getTime();

	if (dateAValue !== dateBValue) {
		return dateBValue - dateAValue; // Newest dates first
	}

	// If dates are the same, fallback to alphabetical sorting by slug
	return a.slug.localeCompare(b.slug);
});

// Process projects to add company logos and generate names
const processedProjects = sortedProjects.map(project => {
	let companyLogoURL: string | null = null;

	// Use name from frontmatter (generated by sync process)
	const projectName = project.data.name;

	// If project has linkedCompany, find the company or client and get its logoURL
	if (project.data.linkedCompany && project.data.linkedCompany.length > 0) {
		// Get the first linked company and process Obsidian link format
		const linkedCompanyRaw = project.data.linkedCompany[0];
		const linkedCompanyName = processObsidianLink(linkedCompanyRaw);

		// First try to find in companies collection
		const company = companies.find(company => {
			const companyName = extractNameFromFilename(company.id);
			return companyName === linkedCompanyName;
		});

		if (company && company.data.logoURL) {
			companyLogoURL = company.data.logoURL;
		} else {
			// If not found in companies, try clients collection
			const client = clients.find(client => {
				const clientName = extractNameFromFilename(client.id);
				return clientName === linkedCompanyName;
			});

			if (client && client.data.logoURL) {
				companyLogoURL = client.data.logoURL;
			}
		}
	}

	return {
		...project,
		data: {
			...project.data,
			name: projectName,
		},
		companyLogoURL,
	};
});

// Get unique project categories
const projectCategories = [
	...new Set(
		processedProjects
			.map(project => project.data.projectCategory)
			.filter(Boolean)
	),
].sort();

// Calculate date range for filter (for input min/max attributes)
const projectDates = processedProjects
	.map(project => {
		const startDate = project.data.dateStart
			? new Date(project.data.dateStart)
			: null;
		const endDate = project.data.dateEnd
			? new Date(project.data.dateEnd)
			: null;
		return { startDate, endDate };
	})
	.filter(dates => dates.startDate || dates.endDate);

const minDate =
	projectDates.length > 0
		? Math.min(
				...projectDates.map(
					d => d.startDate?.getTime() || d.endDate?.getTime() || Date.now()
				)
			)
		: Date.now();
const maxDate =
	projectDates.length > 0
		? Math.max(
				...projectDates.map(
					d => d.endDate?.getTime() || d.startDate?.getTime() || 0
				)
			)
		: Date.now();

const minYear = new Date(minDate).getFullYear();
const maxYear = new Date(maxDate).getFullYear();

const pageTitle = 'Project Gallery - bangsluke Portfolio';
const description = 'Explore all my projects and developments';
const ogimage = {
	url: '/images/imagedefault.webp',
	alt: 'Project Gallery - bangsluke Portfolio',
};
---

<Layout pageTitle={pageTitle} description={description} ogimage={ogimage}>
	<div class="min-h-screen">
		<!-- Header Section -->
		<section class="py-8 px-8 max-md:py-4">
			<div class="max-w-7xl mx-auto">
				<!-- Top Back Button -->
				<div class="mb-8 text-center">
					<a
						href="/#projects"
						class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
						<svg
							class="w-5 h-5 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Projects
					</a>
				</div>

				<div class="flex gap-4 items-center justify-center mb-12">
					<Icon class="text-4xl text-theme-400" name="dashboard" />
					<Heading text="Project " textGradient="Gallery" level={1} />
				</div>

				<p
					class="text-center mx-auto text-lg max-xl:text-base max-w-2xl text-colour mb-12 leading-6 font-medium">
					Explore all my <b
						class="bg-linear-to-r from-light-theme-accent-500 to-theme-500 dark:from-light-theme-accent-300 dark:to-theme-200 text-transparent bg-clip-text"
						>projects and developments</b
					>
				</p>

				<!-- Filter Section -->
				<div
					class="flex flex-col gap-6 mb-8 p-6 bg-white dark:bg-zinc-900 rounded-2xl shadow-lg">
					<!-- Desktop Layout: All filters in one row -->
					<div class="hidden md:flex items-center justify-between gap-6">
						<!-- Category Filter -->
						<div class="flex items-center gap-4">
							<label
								for="categoryFilter"
								class="text-colour font-medium whitespace-nowrap"
								>Filter by Category:</label
							>
							<select
								id="categoryFilter"
								class="global-element global-form-element">
								<option value="">All Categories</option>
								{
									projectCategories.map(category => (
										<option value={category}>{category}</option>
									))
								}
							</select>
						</div>

						<!-- Date Range Filter -->
						<div class="flex items-center gap-4">
							<label class="text-colour font-medium whitespace-nowrap"
								>Date Range:</label
							>
							<div class="flex items-center gap-2">
								<input
									type="date"
									id="startDateInput"
									min={`${minYear}-01-01`}
									max={`${maxYear}-12-31`}
									class="global-element global-form-element"
									placeholder="Start Date"
								/>
								<span class="text-colour">-</span>
								<input
									type="date"
									id="endDateInput"
									min={`${minYear}-01-01`}
									max={`${maxYear}-12-31`}
									class="global-element global-form-element"
									placeholder="End Date"
								/>
							</div>
						</div>

						<!-- Clear Filters Button -->
						<button
							id="clearFilters"
							class="global-element global-button global-clear-button">
							Clear Filters
						</button>

						<!-- Project Count -->
						<div class="text-colour font-medium whitespace-nowrap">
							<span id="projectCount">{processedProjects.length}</span> projects
						</div>
					</div>

					<!-- Mobile Layout: Stacked filters -->
					<div class="md:hidden flex flex-col gap-4">
						<!-- Category Filter -->
						<div class="flex flex-col gap-2">
							<label for="categoryFilterMobile" class="text-colour font-medium"
								>Filter by Category:</label
							>
							<select
								id="categoryFilterMobile"
								class="global-element global-form-element">
								<option value="">All Categories</option>
								{
									projectCategories.map(category => (
										<option value={category}>{category}</option>
									))
								}
							</select>
						</div>

						<!-- Date Range Filter -->
						<div class="flex flex-col gap-2">
							<label class="text-colour font-medium"
								>Filter by Date Range:</label
							>
							<div class="flex items-center gap-2">
								<input
									type="date"
									id="startDateInputMobile"
									min={`${minYear}-01-01`}
									max={`${maxYear}-12-31`}
									class="flex-1 global-element global-form-element"
									placeholder="Start Date"
								/>
								<span class="text-colour">-</span>
								<input
									type="date"
									id="endDateInputMobile"
									min={`${minYear}-01-01`}
									max={`${maxYear}-12-31`}
									class="flex-1 global-element global-form-element"
									placeholder="End Date"
								/>
							</div>
						</div>

						<!-- Clear Filters Button -->
						<button
							id="clearFiltersMobile"
							class="global-element global-button global-clear-button">
							Clear Filters
						</button>

						<!-- Project Count -->
						<div class="text-colour font-medium text-center">
							<span id="projectCountMobile">{processedProjects.length}</span> projects
						</div>
					</div>
				</div>
			</div>
		</section>

		<!-- Projects Grid Section -->
		<section class="py-8 px-8 max-md:py-4 mb-4">
			<div class="max-w-7xl mx-auto">
				<div
					id="projectsGrid"
					class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
					{
						processedProjects.map(project => {
							const startDate = project.data.dateStart
								? new Date(project.data.dateStart)
								: null;
							const endDate = project.data.dateEnd
								? new Date(project.data.dateEnd)
								: null;

							return (
								<div
									data-category={project.data.projectCategory || ''}
									data-start-date={
										startDate ? startDate.toISOString().split('T')[0] : ''
									}
									data-end-date={
										endDate ? endDate.toISOString().split('T')[0] : ''
									}>
									<ProjectCard
										name={
											project.data.name ?? extractNameFromFilename(project.id)
										}
										imageURL={project.data.imageURL}
										technologies={project.data.technologies}
										shortDescription={project.data.shortDescription}
										slug={project.slug}
										companyLogoURL={project.companyLogoURL}
										linkedCompany={project.data.linkedCompany}
										projects={projects}
										dateStart={project.data.dateStart}
										dateEnd={project.data.dateEnd}
									/>
								</div>
							);
						})
					}
				</div>
			</div>
		</section>

		<!-- Bottom Back Button -->
		<section class="py-8 px-8 max-md:py-4">
			<div class="max-w-7xl mx-auto">
				<div class="text-center">
					<a
						href="/#projects"
						class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
						<svg
							class="w-5 h-5 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Projects
					</a>
				</div>
			</div>
		</section>
	</div>

	<script>
		// Get URL parameters
		const urlParams = new URLSearchParams(window.location.search);
		const categoryParam = urlParams.get('category');

		// Filter elements (Desktop)
		const categoryFilter = document.getElementById(
			'categoryFilter'
		) as HTMLSelectElement;
		const projectCards = document.querySelectorAll(
			'#projectsGrid > div'
		) as NodeListOf<HTMLElement>;
		const projectCount = document.getElementById('projectCount');
		const startDateInput = document.getElementById(
			'startDateInput'
		) as HTMLInputElement;
		const endDateInput = document.getElementById(
			'endDateInput'
		) as HTMLInputElement;
		const clearFilters = document.getElementById(
			'clearFilters'
		) as HTMLButtonElement;

		// Filter elements (Mobile)
		const categoryFilterMobile = document.getElementById(
			'categoryFilterMobile'
		) as HTMLSelectElement;
		const projectCountMobile = document.getElementById('projectCountMobile');
		const startDateInputMobile = document.getElementById(
			'startDateInputMobile'
		) as HTMLInputElement;
		const endDateInputMobile = document.getElementById(
			'endDateInputMobile'
		) as HTMLInputElement;
		const clearFiltersMobile = document.getElementById(
			'clearFiltersMobile'
		) as HTMLButtonElement;

		// Pre-fill category filter from URL parameter (both desktop and mobile)
		if (categoryParam) {
			if (categoryFilter) categoryFilter.value = categoryParam;
			if (categoryFilterMobile) categoryFilterMobile.value = categoryParam;
		}

		function clearAllFilters() {
			// Clear desktop filters
			if (categoryFilter) categoryFilter.value = '';
			if (startDateInput) startDateInput.value = '';
			if (endDateInput) endDateInput.value = '';

			// Clear mobile filters
			if (categoryFilterMobile) categoryFilterMobile.value = '';
			if (startDateInputMobile) startDateInputMobile.value = '';
			if (endDateInputMobile) endDateInputMobile.value = '';

			// Re-filter
			filterProjects();
		}

		function filterProjects() {
			// Get values from desktop or mobile inputs (whichever is visible)
			const selectedCategory =
				categoryFilter?.value || categoryFilterMobile?.value || '';
			const startDate =
				startDateInput?.value || startDateInputMobile?.value
					? new Date(startDateInput?.value || startDateInputMobile?.value || '')
					: null;
			const endDate =
				endDateInput?.value || endDateInputMobile?.value
					? new Date(endDateInput?.value || endDateInputMobile?.value || '')
					: null;

			let visibleCount = 0;

			projectCards.forEach(cardWrapper => {
				const cardCategory = cardWrapper.dataset.category;
				const cardStartDate = cardWrapper.dataset.startDate
					? new Date(cardWrapper.dataset.startDate)
					: null;
				const cardEndDate = cardWrapper.dataset.endDate
					? new Date(cardWrapper.dataset.endDate)
					: null;

				const categoryMatch =
					!selectedCategory || cardCategory === selectedCategory;

				// Improved date filtering logic
				let dateMatch = true;
				if (startDate || endDate) {
					// Get the effective project start and end dates
					const projectStart = cardStartDate || cardEndDate || new Date(0);
					const projectEnd =
						cardEndDate || cardStartDate || new Date(9999, 11, 31);

					if (startDate && endDate) {
						// Both start and end dates are set - check for overlap
						// Project overlaps with filter range if:
						// - Project starts before filter ends AND project ends after filter starts
						dateMatch = projectStart <= endDate && projectEnd >= startDate;
					} else if (startDate) {
						// Only start date filter - show projects that end on or after the start date
						dateMatch = projectEnd >= startDate;
					} else if (endDate) {
						// Only end date filter - show projects that start on or before the end date
						dateMatch = projectStart <= endDate;
					}
				}

				const shouldShow = categoryMatch && dateMatch;

				if (shouldShow) {
					cardWrapper.style.display = 'block';
					visibleCount++;
				} else {
					cardWrapper.style.display = 'none';
				}
			});

			// Update project count (both desktop and mobile)
			if (projectCount) projectCount.textContent = visibleCount.toString();
			if (projectCountMobile)
				projectCountMobile.textContent = visibleCount.toString();
		}

		// Add event listeners for desktop
		if (categoryFilter) {
			categoryFilter.addEventListener('change', filterProjects);
		}
		if (startDateInput) {
			startDateInput.addEventListener('input', filterProjects);
		}
		if (endDateInput) {
			endDateInput.addEventListener('input', filterProjects);
		}
		if (clearFilters) {
			clearFilters.addEventListener('click', clearAllFilters);
		}

		// Add event listeners for mobile
		if (categoryFilterMobile) {
			categoryFilterMobile.addEventListener('change', filterProjects);
		}
		if (startDateInputMobile) {
			startDateInputMobile.addEventListener('input', filterProjects);
		}
		if (endDateInputMobile) {
			endDateInputMobile.addEventListener('input', filterProjects);
		}
		if (clearFiltersMobile) {
			clearFiltersMobile.addEventListener('click', clearAllFilters);
		}

		// Initialize filters on page load
		filterProjects();
	</script>
</Layout>
