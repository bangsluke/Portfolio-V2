---
import ExperienceItem from "./ExperienceItem.astro";
import Heading from "../ui/Heading.astro";
import { Icon } from "astro-icon/components";
import { fetchRoles } from "../../utils/roles";
import { formatDateToMMMYYYY } from "../../utils/date-formatter";

// Fetch roles from GraphQL backend with fallback for build time
let EXPERIENCE = [];

try {
  const roles = await fetchRoles();
  
  // Sort roles by dateStart (most recent first) and transform the data
  EXPERIENCE = roles
    .sort((a, b) => new Date(b.dateStart).getTime() - new Date(a.dateStart).getTime())
    .map(role => {
      console.log('Role:', role.name, 'linkedCompany:', role.linkedCompany);
      return {
        date: role.dateEnd 
          ? `${formatDateToMMMYYYY(role.dateStart)} - ${formatDateToMMMYYYY(role.dateEnd)}` 
          : `${formatDateToMMMYYYY(role.dateStart)} - Present`,
        name: role.name,
        company: role.linkedCompany?.name || 'TBC Company',
        roleDescription: role.roleDescription,
      };
    });
} catch (error) {
  console.warn('Experience component: Could not fetch roles from GraphQL, using fallback data:', error);
  
  // Fallback data for when GraphQL is not available (e.g., during build)
  EXPERIENCE = [
    {
      date: "2023 - Present",
      name: "Software Development Coordinator",
      company: "Municipality",
      roleDescription: "Leading software development initiatives and coordinating technology projects for local government.",
    },
    {
      date: "2021 - Present",
      name: "Frontend Developer",
      company: "Freelance",
      roleDescription: "Creating responsive web applications and providing development services to various clients.",
    },
    {
      date: "2017 - 2021",
      name: "Web Developer",
      company: "Various Companies",
      roleDescription: "Developed websites and web applications using modern technologies and best practices.",
    }
  ];
}
---

<section class="py-8 px-8 max-md:py-4 mb-4 scroll-m-16" id="experience">
  <div class="flex flex-col pt-8 max-w-4xl mx-auto">
    <div class="flex gap-4 items-center justify-center">
      <Icon class="text-3xl dark:text-white text-blacktext" name="briefcase" />
      <Heading text="Work" textGradient="Experience" level={2} />
    </div>

    <div class="relative max-md:mt-0 mt-8" aria-label="Professional experience">
      <ol class="relative mt-10">
        {
          EXPERIENCE.map((experience, index) => (
            <li>
              <article
                role="article"
                aria-labelledby={`experience-title-${index}`}
              >
                <div
                  class="flex flex-col gap-2  text-zinc-00 dark:text-zinc-300 md:col-span-3"
                  aria-describedby={`experience-title-${index}`}
                >
                  <ExperienceItem {...experience} />
                </div>
              </article>
            </li>
          ))
        }
      </ol>
    </div>
  </div>
</section>
