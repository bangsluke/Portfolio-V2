---
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import WorkExperienceItem from '../components/portfolio/WorkExperienceItem.astro';
import Heading from '../components/ui/Heading.astro';
import Layout from '../layouts/Layout.astro';
import { processObsidianLink } from '../utils/content-processor';
import { extractNameFromFilename } from '../utils/filename-utils';

// Get all roles, companies, and clients from the local content folder
const roles = await getCollection('roles');
const companies = await getCollection('companies');
const clients = await getCollection('clients');

// Process company data for each role
const rolesWithCompanyData = await Promise.all(
	roles.map(async role => {
		let companyLogoURL = null;
		let processedLinkedCompany = '';
		let allCompanyLogos: { logoURL: string | null; name: string }[] = [];

		if (role.data.linkedCompany && role.data.linkedCompany.length > 0) {
			// Process the first company for display
			processedLinkedCompany = processObsidianLink(role.data.linkedCompany[0]);

			// Get company/client logos for all linked entities
			allCompanyLogos = await Promise.all(
				role.data.linkedCompany.map(async companyLink => {
					let logoURL: string | null = null;
					// Extract company/client name from Obsidian link format [[Company Name]]
					const entityName = companyLink.replace(/\[\[(.*?)\]\]/, '$1');

					// First try to find in companies collection
					const company = companies.find(
						company => company.id === entityName + '.md'
					);

					if (company && company.data.logoURL) {
						logoURL = company.data.logoURL;
					} else {
						// If not found in companies, try clients collection
						const client = clients.find(
							client => client.id === entityName + '.md'
						);

						if (client && client.data.logoURL) {
							logoURL = client.data.logoURL;
						}
					}

					return {
						logoURL,
						name: entityName,
					};
				})
			);

			// Get company logo for the first company
			if (allCompanyLogos.length > 0) {
				companyLogoURL = allCompanyLogos[0].logoURL;
			}
		}

		return {
			...role,
			companyLogoURL,
			processedLinkedCompany,
			allCompanyLogos,
		};
	})
);

// Filter out roles with "voluntary" tag for main timeline
const nonVoluntaryRoles = rolesWithCompanyData.filter(
	role => !role.data.tags || !role.data.tags.includes('voluntary')
);

// Filter roles with "voluntary" tag for voluntary section
const voluntaryRoles = rolesWithCompanyData.filter(
	role => role.data.tags && role.data.tags.includes('voluntary')
);

// Sort non-voluntary roles by dateStart date (newest first)
const sortedRoles = nonVoluntaryRoles.sort((a, b) => {
	// Sort by dateStart date, fallback to dateEnd date, then alphabetically
	const dateA = a.data.dateStart || a.data.dateEnd || new Date(0);
	const dateB = b.data.dateStart || b.data.dateEnd || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting by slug (filename)
	return a.slug.localeCompare(b.slug);
});

// Sort voluntary roles by dateStart date (newest first)
const sortedVoluntaryRoles = voluntaryRoles.sort((a, b) => {
	// Sort by dateStart date, fallback to dateEnd date, then alphabetically
	const dateA = a.data.dateStart || a.data.dateEnd || new Date(0);
	const dateB = b.data.dateStart || b.data.dateEnd || new Date(0);

	if (dateA instanceof Date && dateB instanceof Date) {
		return dateB.getTime() - dateA.getTime();
	}

	// Fallback to alphabetical sorting by slug (filename)
	return a.slug.localeCompare(b.slug);
});

const pageTitle = 'Work Experience - bangsluke Portfolio';
const description = 'Complete work experience timeline';
const ogimage = {
	url: '/images/imagedefault.webp',
	alt: 'Work Experience Timeline',
};
---

<Layout pageTitle={pageTitle} description={description} ogimage={ogimage}>
	<div
		class="min-h-screen"
		style="background: linear-gradient(45deg, var(--color-theme-500-rgba-001) 10.79%, var(--color-theme-500-rgba-003) 40.92%, var(--color-theme-500-rgba-001) 90.35%)">
		<!-- Header -->
		<div class="pt-16">
			<div class="max-w-4xl mx-auto px-8 text-center">
				<!-- Top Back Button -->
				<div class="mb-8 text-center">
					<a
						href="/"
						class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
						<svg
							class="w-5 h-5 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Portfolio
					</a>
				</div>

				<div class="flex gap-4 items-center justify-center mb-4">
					<Icon class="text-4xl dark:text-white" name="briefcase" />
					<Heading text="Work" textGradient="Experience" level={1} />
				</div>
				<p class="dark:text-white/90 text-lg max-w-2xl mx-auto">
					Complete timeline of my professional experience and career journey
				</p>
				<div class="mt-6 flex flex-wrap gap-4 justify-center">
					{
						sortedVoluntaryRoles.length > 0 && (
							<a
								href="#voluntary-roles"
								class="inline-flex items-center px-4 py-2 bg-white/20 hover:bg-white/30 dark:text-white font-medium rounded-lg transition-colors duration-300">
								<svg
									class="w-4 h-4 mr-2"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24">
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M19 14l-7 7m0 0l-7-7m7 7V3"
									/>
								</svg>
								View Voluntary Roles
							</a>
						)
					}
				</div>
			</div>
		</div>

		<!-- Timeline -->
		<section class="py-16 px-8">
			<div class="max-w-4xl mx-auto">
				<div class="relative" aria-label="Complete professional experience">
					<ol class="relative mt-10">
						{
							sortedRoles.map((role, index) => (
								<li>
									<article
										role="article"
										aria-labelledby={`experience-title-${index}`}>
										<div
											class="flex flex-col gap-2 text-zinc-700 dark:text-zinc-300 md:col-span-3"
											aria-describedby={`experience-title-${index}`}>
											<WorkExperienceItem
												{...role.data}
												name={
													role.data.name || extractNameFromFilename(role.id)
												}
												processedLinkedCompany={role.processedLinkedCompany}
												companyLogoURL={role.companyLogoURL}
												allCompanyLogos={role.allCompanyLogos}
											/>
										</div>
									</article>
								</li>
							))
						}
					</ol>
				</div>

				{/* Voluntary Roles Section */}
				{
					sortedVoluntaryRoles.length > 0 && (
						<div
							class="mt-16 pt-16 border-t border-gray-200 dark:border-gray-700"
							id="voluntary-roles">
							<div class="text-center mb-12">
								<div class="flex gap-4 items-center justify-center mb-4">
									<Icon class="text-3xl text-theme-400" name="people" />
									<Heading text="Voluntary" textGradient="Roles" level={2} />
								</div>
								<p class="text-zinc-600 dark:text-zinc-400 text-lg max-w-2xl mx-auto">
									Roles and positions I've taken on voluntarily to support
									organizations and communities
								</p>
							</div>

							<div class="relative" aria-label="Voluntary roles experience">
								<ol class="relative mt-10">
									{sortedVoluntaryRoles.map((role, index) => (
										<li>
											<article
												role="article"
												aria-labelledby={`voluntary-title-${index}`}>
												<div
													class="flex flex-col gap-2 text-zinc-700 dark:text-zinc-300 md:col-span-3"
													aria-describedby={`voluntary-title-${index}`}>
													<WorkExperienceItem
														{...role.data}
														name={
															role.data.name || extractNameFromFilename(role.id)
														}
														processedLinkedCompany={role.processedLinkedCompany}
														companyLogoURL={role.companyLogoURL}
														allCompanyLogos={role.allCompanyLogos}
													/>
												</div>
											</article>
										</li>
									))}
								</ol>
							</div>
						</div>
					)
				}
			</div>

			<!-- Bottom Back Button -->
			<section class="py-8 px-8 max-md:py-4">
				<div class="max-w-7xl mx-auto">
					<div class="text-center">
						<a
							href="/"
							class="inline-flex items-center text-theme-400 hover:text-theme-300 transition-colors">
							<svg
								class="w-5 h-5 mr-2"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M15 19l-7-7 7-7"></path>
							</svg>
							Back to Portfolio
						</a>
					</div>
				</div>
			</section>
		</section>
	</div>
</Layout>
